// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/06/2023 21:27:34"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    risc_v32i
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module risc_v32i_vlg_sample_tst(
	i_CLK,
	i_RST,
	sampler_tx
);
input  i_CLK;
input  i_RST;
output sampler_tx;

reg sample;
time current_time;
always @(i_CLK or i_RST)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module risc_v32i_vlg_check_tst (
	ALU_OUT,
	INSTRUCTION1,
	PC,
	REG_WR,
	RS1_VALUE,
	RS2_VALUE,
	SIG_EXT12_32,
	UAL_FONTE,
	sampler_rx
);
input [31:0] ALU_OUT;
input [31:0] INSTRUCTION1;
input [31:0] PC;
input  REG_WR;
input [31:0] RS1_VALUE;
input [31:0] RS2_VALUE;
input [31:0] SIG_EXT12_32;
input  UAL_FONTE;
input sampler_rx;

reg [31:0] ALU_OUT_expected;
reg [31:0] INSTRUCTION1_expected;
reg [31:0] PC_expected;
reg  REG_WR_expected;
reg [31:0] RS1_VALUE_expected;
reg [31:0] RS2_VALUE_expected;
reg [31:0] SIG_EXT12_32_expected;
reg  UAL_FONTE_expected;

reg [31:0] ALU_OUT_prev;
reg [31:0] INSTRUCTION1_prev;
reg [31:0] PC_prev;
reg  REG_WR_prev;
reg [31:0] RS1_VALUE_prev;
reg [31:0] RS2_VALUE_prev;
reg [31:0] SIG_EXT12_32_prev;
reg  UAL_FONTE_prev;

reg [31:0] ALU_OUT_expected_prev;
reg [31:0] INSTRUCTION1_expected_prev;
reg [31:0] PC_expected_prev;
reg  REG_WR_expected_prev;
reg [31:0] RS1_VALUE_expected_prev;
reg [31:0] RS2_VALUE_expected_prev;
reg [31:0] SIG_EXT12_32_expected_prev;
reg  UAL_FONTE_expected_prev;

reg [31:0] last_ALU_OUT_exp;
reg [31:0] last_INSTRUCTION1_exp;
reg [31:0] last_PC_exp;
reg  last_REG_WR_exp;
reg [31:0] last_RS1_VALUE_exp;
reg [31:0] last_RS2_VALUE_exp;
reg [31:0] last_SIG_EXT12_32_exp;
reg  last_UAL_FONTE_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALU_OUT_prev = ALU_OUT;
	INSTRUCTION1_prev = INSTRUCTION1;
	PC_prev = PC;
	REG_WR_prev = REG_WR;
	RS1_VALUE_prev = RS1_VALUE;
	RS2_VALUE_prev = RS2_VALUE;
	SIG_EXT12_32_prev = SIG_EXT12_32;
	UAL_FONTE_prev = UAL_FONTE;
end

// update expected /o prevs

always @(trigger)
begin
	ALU_OUT_expected_prev = ALU_OUT_expected;
	INSTRUCTION1_expected_prev = INSTRUCTION1_expected;
	PC_expected_prev = PC_expected;
	REG_WR_expected_prev = REG_WR_expected;
	RS1_VALUE_expected_prev = RS1_VALUE_expected;
	RS2_VALUE_expected_prev = RS2_VALUE_expected;
	SIG_EXT12_32_expected_prev = SIG_EXT12_32_expected;
	UAL_FONTE_expected_prev = UAL_FONTE_expected;
end


// expected PC[ 31 ]
initial
begin
	PC_expected[31] = 1'bX;
end 
// expected PC[ 30 ]
initial
begin
	PC_expected[30] = 1'bX;
end 
// expected PC[ 29 ]
initial
begin
	PC_expected[29] = 1'bX;
end 
// expected PC[ 28 ]
initial
begin
	PC_expected[28] = 1'bX;
end 
// expected PC[ 27 ]
initial
begin
	PC_expected[27] = 1'bX;
end 
// expected PC[ 26 ]
initial
begin
	PC_expected[26] = 1'bX;
end 
// expected PC[ 25 ]
initial
begin
	PC_expected[25] = 1'bX;
end 
// expected PC[ 24 ]
initial
begin
	PC_expected[24] = 1'bX;
end 
// expected PC[ 23 ]
initial
begin
	PC_expected[23] = 1'bX;
end 
// expected PC[ 22 ]
initial
begin
	PC_expected[22] = 1'bX;
end 
// expected PC[ 21 ]
initial
begin
	PC_expected[21] = 1'bX;
end 
// expected PC[ 20 ]
initial
begin
	PC_expected[20] = 1'bX;
end 
// expected PC[ 19 ]
initial
begin
	PC_expected[19] = 1'bX;
end 
// expected PC[ 18 ]
initial
begin
	PC_expected[18] = 1'bX;
end 
// expected PC[ 17 ]
initial
begin
	PC_expected[17] = 1'bX;
end 
// expected PC[ 16 ]
initial
begin
	PC_expected[16] = 1'bX;
end 
// expected PC[ 15 ]
initial
begin
	PC_expected[15] = 1'bX;
end 
// expected PC[ 14 ]
initial
begin
	PC_expected[14] = 1'bX;
end 
// expected PC[ 13 ]
initial
begin
	PC_expected[13] = 1'bX;
end 
// expected PC[ 12 ]
initial
begin
	PC_expected[12] = 1'bX;
end 
// expected PC[ 11 ]
initial
begin
	PC_expected[11] = 1'bX;
end 
// expected PC[ 10 ]
initial
begin
	PC_expected[10] = 1'bX;
end 
// expected PC[ 9 ]
initial
begin
	PC_expected[9] = 1'bX;
end 
// expected PC[ 8 ]
initial
begin
	PC_expected[8] = 1'bX;
end 
// expected PC[ 7 ]
initial
begin
	PC_expected[7] = 1'bX;
end 
// expected PC[ 6 ]
initial
begin
	PC_expected[6] = 1'bX;
end 
// expected PC[ 5 ]
initial
begin
	PC_expected[5] = 1'bX;
end 
// expected PC[ 4 ]
initial
begin
	PC_expected[4] = 1'bX;
end 
// expected PC[ 3 ]
initial
begin
	PC_expected[3] = 1'bX;
end 
// expected PC[ 2 ]
initial
begin
	PC_expected[2] = 1'bX;
end 
// expected PC[ 1 ]
initial
begin
	PC_expected[1] = 1'bX;
end 
// expected PC[ 0 ]
initial
begin
	PC_expected[0] = 1'bX;
end 
// expected INSTRUCTION1[ 31 ]
initial
begin
	INSTRUCTION1_expected[31] = 1'bX;
end 
// expected INSTRUCTION1[ 30 ]
initial
begin
	INSTRUCTION1_expected[30] = 1'bX;
end 
// expected INSTRUCTION1[ 29 ]
initial
begin
	INSTRUCTION1_expected[29] = 1'bX;
end 
// expected INSTRUCTION1[ 28 ]
initial
begin
	INSTRUCTION1_expected[28] = 1'bX;
end 
// expected INSTRUCTION1[ 27 ]
initial
begin
	INSTRUCTION1_expected[27] = 1'bX;
end 
// expected INSTRUCTION1[ 26 ]
initial
begin
	INSTRUCTION1_expected[26] = 1'bX;
end 
// expected INSTRUCTION1[ 25 ]
initial
begin
	INSTRUCTION1_expected[25] = 1'bX;
end 
// expected INSTRUCTION1[ 24 ]
initial
begin
	INSTRUCTION1_expected[24] = 1'bX;
end 
// expected INSTRUCTION1[ 23 ]
initial
begin
	INSTRUCTION1_expected[23] = 1'bX;
end 
// expected INSTRUCTION1[ 22 ]
initial
begin
	INSTRUCTION1_expected[22] = 1'bX;
end 
// expected INSTRUCTION1[ 21 ]
initial
begin
	INSTRUCTION1_expected[21] = 1'bX;
end 
// expected INSTRUCTION1[ 20 ]
initial
begin
	INSTRUCTION1_expected[20] = 1'bX;
end 
// expected INSTRUCTION1[ 19 ]
initial
begin
	INSTRUCTION1_expected[19] = 1'bX;
end 
// expected INSTRUCTION1[ 18 ]
initial
begin
	INSTRUCTION1_expected[18] = 1'bX;
end 
// expected INSTRUCTION1[ 17 ]
initial
begin
	INSTRUCTION1_expected[17] = 1'bX;
end 
// expected INSTRUCTION1[ 16 ]
initial
begin
	INSTRUCTION1_expected[16] = 1'bX;
end 
// expected INSTRUCTION1[ 15 ]
initial
begin
	INSTRUCTION1_expected[15] = 1'bX;
end 
// expected INSTRUCTION1[ 14 ]
initial
begin
	INSTRUCTION1_expected[14] = 1'bX;
end 
// expected INSTRUCTION1[ 13 ]
initial
begin
	INSTRUCTION1_expected[13] = 1'bX;
end 
// expected INSTRUCTION1[ 12 ]
initial
begin
	INSTRUCTION1_expected[12] = 1'bX;
end 
// expected INSTRUCTION1[ 11 ]
initial
begin
	INSTRUCTION1_expected[11] = 1'bX;
end 
// expected INSTRUCTION1[ 10 ]
initial
begin
	INSTRUCTION1_expected[10] = 1'bX;
end 
// expected INSTRUCTION1[ 9 ]
initial
begin
	INSTRUCTION1_expected[9] = 1'bX;
end 
// expected INSTRUCTION1[ 8 ]
initial
begin
	INSTRUCTION1_expected[8] = 1'bX;
end 
// expected INSTRUCTION1[ 7 ]
initial
begin
	INSTRUCTION1_expected[7] = 1'bX;
end 
// expected INSTRUCTION1[ 6 ]
initial
begin
	INSTRUCTION1_expected[6] = 1'bX;
end 
// expected INSTRUCTION1[ 5 ]
initial
begin
	INSTRUCTION1_expected[5] = 1'bX;
end 
// expected INSTRUCTION1[ 4 ]
initial
begin
	INSTRUCTION1_expected[4] = 1'bX;
end 
// expected INSTRUCTION1[ 3 ]
initial
begin
	INSTRUCTION1_expected[3] = 1'bX;
end 
// expected INSTRUCTION1[ 2 ]
initial
begin
	INSTRUCTION1_expected[2] = 1'bX;
end 
// expected INSTRUCTION1[ 1 ]
initial
begin
	INSTRUCTION1_expected[1] = 1'bX;
end 
// expected INSTRUCTION1[ 0 ]
initial
begin
	INSTRUCTION1_expected[0] = 1'bX;
end 
// expected RS1_VALUE[ 31 ]
initial
begin
	RS1_VALUE_expected[31] = 1'bX;
end 
// expected RS1_VALUE[ 30 ]
initial
begin
	RS1_VALUE_expected[30] = 1'bX;
end 
// expected RS1_VALUE[ 29 ]
initial
begin
	RS1_VALUE_expected[29] = 1'bX;
end 
// expected RS1_VALUE[ 28 ]
initial
begin
	RS1_VALUE_expected[28] = 1'bX;
end 
// expected RS1_VALUE[ 27 ]
initial
begin
	RS1_VALUE_expected[27] = 1'bX;
end 
// expected RS1_VALUE[ 26 ]
initial
begin
	RS1_VALUE_expected[26] = 1'bX;
end 
// expected RS1_VALUE[ 25 ]
initial
begin
	RS1_VALUE_expected[25] = 1'bX;
end 
// expected RS1_VALUE[ 24 ]
initial
begin
	RS1_VALUE_expected[24] = 1'bX;
end 
// expected RS1_VALUE[ 23 ]
initial
begin
	RS1_VALUE_expected[23] = 1'bX;
end 
// expected RS1_VALUE[ 22 ]
initial
begin
	RS1_VALUE_expected[22] = 1'bX;
end 
// expected RS1_VALUE[ 21 ]
initial
begin
	RS1_VALUE_expected[21] = 1'bX;
end 
// expected RS1_VALUE[ 20 ]
initial
begin
	RS1_VALUE_expected[20] = 1'bX;
end 
// expected RS1_VALUE[ 19 ]
initial
begin
	RS1_VALUE_expected[19] = 1'bX;
end 
// expected RS1_VALUE[ 18 ]
initial
begin
	RS1_VALUE_expected[18] = 1'bX;
end 
// expected RS1_VALUE[ 17 ]
initial
begin
	RS1_VALUE_expected[17] = 1'bX;
end 
// expected RS1_VALUE[ 16 ]
initial
begin
	RS1_VALUE_expected[16] = 1'bX;
end 
// expected RS1_VALUE[ 15 ]
initial
begin
	RS1_VALUE_expected[15] = 1'bX;
end 
// expected RS1_VALUE[ 14 ]
initial
begin
	RS1_VALUE_expected[14] = 1'bX;
end 
// expected RS1_VALUE[ 13 ]
initial
begin
	RS1_VALUE_expected[13] = 1'bX;
end 
// expected RS1_VALUE[ 12 ]
initial
begin
	RS1_VALUE_expected[12] = 1'bX;
end 
// expected RS1_VALUE[ 11 ]
initial
begin
	RS1_VALUE_expected[11] = 1'bX;
end 
// expected RS1_VALUE[ 10 ]
initial
begin
	RS1_VALUE_expected[10] = 1'bX;
end 
// expected RS1_VALUE[ 9 ]
initial
begin
	RS1_VALUE_expected[9] = 1'bX;
end 
// expected RS1_VALUE[ 8 ]
initial
begin
	RS1_VALUE_expected[8] = 1'bX;
end 
// expected RS1_VALUE[ 7 ]
initial
begin
	RS1_VALUE_expected[7] = 1'bX;
end 
// expected RS1_VALUE[ 6 ]
initial
begin
	RS1_VALUE_expected[6] = 1'bX;
end 
// expected RS1_VALUE[ 5 ]
initial
begin
	RS1_VALUE_expected[5] = 1'bX;
end 
// expected RS1_VALUE[ 4 ]
initial
begin
	RS1_VALUE_expected[4] = 1'bX;
end 
// expected RS1_VALUE[ 3 ]
initial
begin
	RS1_VALUE_expected[3] = 1'bX;
end 
// expected RS1_VALUE[ 2 ]
initial
begin
	RS1_VALUE_expected[2] = 1'bX;
end 
// expected RS1_VALUE[ 1 ]
initial
begin
	RS1_VALUE_expected[1] = 1'bX;
end 
// expected RS1_VALUE[ 0 ]
initial
begin
	RS1_VALUE_expected[0] = 1'bX;
end 
// expected RS2_VALUE[ 31 ]
initial
begin
	RS2_VALUE_expected[31] = 1'bX;
end 
// expected RS2_VALUE[ 30 ]
initial
begin
	RS2_VALUE_expected[30] = 1'bX;
end 
// expected RS2_VALUE[ 29 ]
initial
begin
	RS2_VALUE_expected[29] = 1'bX;
end 
// expected RS2_VALUE[ 28 ]
initial
begin
	RS2_VALUE_expected[28] = 1'bX;
end 
// expected RS2_VALUE[ 27 ]
initial
begin
	RS2_VALUE_expected[27] = 1'bX;
end 
// expected RS2_VALUE[ 26 ]
initial
begin
	RS2_VALUE_expected[26] = 1'bX;
end 
// expected RS2_VALUE[ 25 ]
initial
begin
	RS2_VALUE_expected[25] = 1'bX;
end 
// expected RS2_VALUE[ 24 ]
initial
begin
	RS2_VALUE_expected[24] = 1'bX;
end 
// expected RS2_VALUE[ 23 ]
initial
begin
	RS2_VALUE_expected[23] = 1'bX;
end 
// expected RS2_VALUE[ 22 ]
initial
begin
	RS2_VALUE_expected[22] = 1'bX;
end 
// expected RS2_VALUE[ 21 ]
initial
begin
	RS2_VALUE_expected[21] = 1'bX;
end 
// expected RS2_VALUE[ 20 ]
initial
begin
	RS2_VALUE_expected[20] = 1'bX;
end 
// expected RS2_VALUE[ 19 ]
initial
begin
	RS2_VALUE_expected[19] = 1'bX;
end 
// expected RS2_VALUE[ 18 ]
initial
begin
	RS2_VALUE_expected[18] = 1'bX;
end 
// expected RS2_VALUE[ 17 ]
initial
begin
	RS2_VALUE_expected[17] = 1'bX;
end 
// expected RS2_VALUE[ 16 ]
initial
begin
	RS2_VALUE_expected[16] = 1'bX;
end 
// expected RS2_VALUE[ 15 ]
initial
begin
	RS2_VALUE_expected[15] = 1'bX;
end 
// expected RS2_VALUE[ 14 ]
initial
begin
	RS2_VALUE_expected[14] = 1'bX;
end 
// expected RS2_VALUE[ 13 ]
initial
begin
	RS2_VALUE_expected[13] = 1'bX;
end 
// expected RS2_VALUE[ 12 ]
initial
begin
	RS2_VALUE_expected[12] = 1'bX;
end 
// expected RS2_VALUE[ 11 ]
initial
begin
	RS2_VALUE_expected[11] = 1'bX;
end 
// expected RS2_VALUE[ 10 ]
initial
begin
	RS2_VALUE_expected[10] = 1'bX;
end 
// expected RS2_VALUE[ 9 ]
initial
begin
	RS2_VALUE_expected[9] = 1'bX;
end 
// expected RS2_VALUE[ 8 ]
initial
begin
	RS2_VALUE_expected[8] = 1'bX;
end 
// expected RS2_VALUE[ 7 ]
initial
begin
	RS2_VALUE_expected[7] = 1'bX;
end 
// expected RS2_VALUE[ 6 ]
initial
begin
	RS2_VALUE_expected[6] = 1'bX;
end 
// expected RS2_VALUE[ 5 ]
initial
begin
	RS2_VALUE_expected[5] = 1'bX;
end 
// expected RS2_VALUE[ 4 ]
initial
begin
	RS2_VALUE_expected[4] = 1'bX;
end 
// expected RS2_VALUE[ 3 ]
initial
begin
	RS2_VALUE_expected[3] = 1'bX;
end 
// expected RS2_VALUE[ 2 ]
initial
begin
	RS2_VALUE_expected[2] = 1'bX;
end 
// expected RS2_VALUE[ 1 ]
initial
begin
	RS2_VALUE_expected[1] = 1'bX;
end 
// expected RS2_VALUE[ 0 ]
initial
begin
	RS2_VALUE_expected[0] = 1'bX;
end 
// expected SIG_EXT12_32[ 31 ]
initial
begin
	SIG_EXT12_32_expected[31] = 1'bX;
end 
// expected SIG_EXT12_32[ 30 ]
initial
begin
	SIG_EXT12_32_expected[30] = 1'bX;
end 
// expected SIG_EXT12_32[ 29 ]
initial
begin
	SIG_EXT12_32_expected[29] = 1'bX;
end 
// expected SIG_EXT12_32[ 28 ]
initial
begin
	SIG_EXT12_32_expected[28] = 1'bX;
end 
// expected SIG_EXT12_32[ 27 ]
initial
begin
	SIG_EXT12_32_expected[27] = 1'bX;
end 
// expected SIG_EXT12_32[ 26 ]
initial
begin
	SIG_EXT12_32_expected[26] = 1'bX;
end 
// expected SIG_EXT12_32[ 25 ]
initial
begin
	SIG_EXT12_32_expected[25] = 1'bX;
end 
// expected SIG_EXT12_32[ 24 ]
initial
begin
	SIG_EXT12_32_expected[24] = 1'bX;
end 
// expected SIG_EXT12_32[ 23 ]
initial
begin
	SIG_EXT12_32_expected[23] = 1'bX;
end 
// expected SIG_EXT12_32[ 22 ]
initial
begin
	SIG_EXT12_32_expected[22] = 1'bX;
end 
// expected SIG_EXT12_32[ 21 ]
initial
begin
	SIG_EXT12_32_expected[21] = 1'bX;
end 
// expected SIG_EXT12_32[ 20 ]
initial
begin
	SIG_EXT12_32_expected[20] = 1'bX;
end 
// expected SIG_EXT12_32[ 19 ]
initial
begin
	SIG_EXT12_32_expected[19] = 1'bX;
end 
// expected SIG_EXT12_32[ 18 ]
initial
begin
	SIG_EXT12_32_expected[18] = 1'bX;
end 
// expected SIG_EXT12_32[ 17 ]
initial
begin
	SIG_EXT12_32_expected[17] = 1'bX;
end 
// expected SIG_EXT12_32[ 16 ]
initial
begin
	SIG_EXT12_32_expected[16] = 1'bX;
end 
// expected SIG_EXT12_32[ 15 ]
initial
begin
	SIG_EXT12_32_expected[15] = 1'bX;
end 
// expected SIG_EXT12_32[ 14 ]
initial
begin
	SIG_EXT12_32_expected[14] = 1'bX;
end 
// expected SIG_EXT12_32[ 13 ]
initial
begin
	SIG_EXT12_32_expected[13] = 1'bX;
end 
// expected SIG_EXT12_32[ 12 ]
initial
begin
	SIG_EXT12_32_expected[12] = 1'bX;
end 
// expected SIG_EXT12_32[ 11 ]
initial
begin
	SIG_EXT12_32_expected[11] = 1'bX;
end 
// expected SIG_EXT12_32[ 10 ]
initial
begin
	SIG_EXT12_32_expected[10] = 1'bX;
end 
// expected SIG_EXT12_32[ 9 ]
initial
begin
	SIG_EXT12_32_expected[9] = 1'bX;
end 
// expected SIG_EXT12_32[ 8 ]
initial
begin
	SIG_EXT12_32_expected[8] = 1'bX;
end 
// expected SIG_EXT12_32[ 7 ]
initial
begin
	SIG_EXT12_32_expected[7] = 1'bX;
end 
// expected SIG_EXT12_32[ 6 ]
initial
begin
	SIG_EXT12_32_expected[6] = 1'bX;
end 
// expected SIG_EXT12_32[ 5 ]
initial
begin
	SIG_EXT12_32_expected[5] = 1'bX;
end 
// expected SIG_EXT12_32[ 4 ]
initial
begin
	SIG_EXT12_32_expected[4] = 1'bX;
end 
// expected SIG_EXT12_32[ 3 ]
initial
begin
	SIG_EXT12_32_expected[3] = 1'bX;
end 
// expected SIG_EXT12_32[ 2 ]
initial
begin
	SIG_EXT12_32_expected[2] = 1'bX;
end 
// expected SIG_EXT12_32[ 1 ]
initial
begin
	SIG_EXT12_32_expected[1] = 1'bX;
end 
// expected SIG_EXT12_32[ 0 ]
initial
begin
	SIG_EXT12_32_expected[0] = 1'bX;
end 
// expected ALU_OUT[ 31 ]
initial
begin
	ALU_OUT_expected[31] = 1'bX;
end 
// expected ALU_OUT[ 30 ]
initial
begin
	ALU_OUT_expected[30] = 1'bX;
end 
// expected ALU_OUT[ 29 ]
initial
begin
	ALU_OUT_expected[29] = 1'bX;
end 
// expected ALU_OUT[ 28 ]
initial
begin
	ALU_OUT_expected[28] = 1'bX;
end 
// expected ALU_OUT[ 27 ]
initial
begin
	ALU_OUT_expected[27] = 1'bX;
end 
// expected ALU_OUT[ 26 ]
initial
begin
	ALU_OUT_expected[26] = 1'bX;
end 
// expected ALU_OUT[ 25 ]
initial
begin
	ALU_OUT_expected[25] = 1'bX;
end 
// expected ALU_OUT[ 24 ]
initial
begin
	ALU_OUT_expected[24] = 1'bX;
end 
// expected ALU_OUT[ 23 ]
initial
begin
	ALU_OUT_expected[23] = 1'bX;
end 
// expected ALU_OUT[ 22 ]
initial
begin
	ALU_OUT_expected[22] = 1'bX;
end 
// expected ALU_OUT[ 21 ]
initial
begin
	ALU_OUT_expected[21] = 1'bX;
end 
// expected ALU_OUT[ 20 ]
initial
begin
	ALU_OUT_expected[20] = 1'bX;
end 
// expected ALU_OUT[ 19 ]
initial
begin
	ALU_OUT_expected[19] = 1'bX;
end 
// expected ALU_OUT[ 18 ]
initial
begin
	ALU_OUT_expected[18] = 1'bX;
end 
// expected ALU_OUT[ 17 ]
initial
begin
	ALU_OUT_expected[17] = 1'bX;
end 
// expected ALU_OUT[ 16 ]
initial
begin
	ALU_OUT_expected[16] = 1'bX;
end 
// expected ALU_OUT[ 15 ]
initial
begin
	ALU_OUT_expected[15] = 1'bX;
end 
// expected ALU_OUT[ 14 ]
initial
begin
	ALU_OUT_expected[14] = 1'bX;
end 
// expected ALU_OUT[ 13 ]
initial
begin
	ALU_OUT_expected[13] = 1'bX;
end 
// expected ALU_OUT[ 12 ]
initial
begin
	ALU_OUT_expected[12] = 1'bX;
end 
// expected ALU_OUT[ 11 ]
initial
begin
	ALU_OUT_expected[11] = 1'bX;
end 
// expected ALU_OUT[ 10 ]
initial
begin
	ALU_OUT_expected[10] = 1'bX;
end 
// expected ALU_OUT[ 9 ]
initial
begin
	ALU_OUT_expected[9] = 1'bX;
end 
// expected ALU_OUT[ 8 ]
initial
begin
	ALU_OUT_expected[8] = 1'bX;
end 
// expected ALU_OUT[ 7 ]
initial
begin
	ALU_OUT_expected[7] = 1'bX;
end 
// expected ALU_OUT[ 6 ]
initial
begin
	ALU_OUT_expected[6] = 1'bX;
end 
// expected ALU_OUT[ 5 ]
initial
begin
	ALU_OUT_expected[5] = 1'bX;
end 
// expected ALU_OUT[ 4 ]
initial
begin
	ALU_OUT_expected[4] = 1'bX;
end 
// expected ALU_OUT[ 3 ]
initial
begin
	ALU_OUT_expected[3] = 1'bX;
end 
// expected ALU_OUT[ 2 ]
initial
begin
	ALU_OUT_expected[2] = 1'bX;
end 
// expected ALU_OUT[ 1 ]
initial
begin
	ALU_OUT_expected[1] = 1'bX;
end 
// expected ALU_OUT[ 0 ]
initial
begin
	ALU_OUT_expected[0] = 1'bX;
end 

// expected REG_WR
initial
begin
	REG_WR_expected = 1'bX;
end 

// expected UAL_FONTE
initial
begin
	UAL_FONTE_expected = 1'bX;
end 
// generate trigger
always @(ALU_OUT_expected or ALU_OUT or INSTRUCTION1_expected or INSTRUCTION1 or PC_expected or PC or REG_WR_expected or REG_WR or RS1_VALUE_expected or RS1_VALUE or RS2_VALUE_expected or RS2_VALUE or SIG_EXT12_32_expected or SIG_EXT12_32 or UAL_FONTE_expected or UAL_FONTE)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALU_OUT = %b | expected INSTRUCTION1 = %b | expected PC = %b | expected REG_WR = %b | expected RS1_VALUE = %b | expected RS2_VALUE = %b | expected SIG_EXT12_32 = %b | expected UAL_FONTE = %b | ",ALU_OUT_expected_prev,INSTRUCTION1_expected_prev,PC_expected_prev,REG_WR_expected_prev,RS1_VALUE_expected_prev,RS2_VALUE_expected_prev,SIG_EXT12_32_expected_prev,UAL_FONTE_expected_prev);
	$display("| real ALU_OUT = %b | real INSTRUCTION1 = %b | real PC = %b | real REG_WR = %b | real RS1_VALUE = %b | real RS2_VALUE = %b | real SIG_EXT12_32 = %b | real UAL_FONTE = %b | ",ALU_OUT_prev,INSTRUCTION1_prev,PC_prev,REG_WR_prev,RS1_VALUE_prev,RS2_VALUE_prev,SIG_EXT12_32_prev,UAL_FONTE_prev);
`endif
	if (
		( ALU_OUT_expected_prev[0] !== 1'bx ) && ( ALU_OUT_prev[0] !== ALU_OUT_expected_prev[0] )
		&& ((ALU_OUT_expected_prev[0] !== last_ALU_OUT_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[0] = ALU_OUT_expected_prev[0];
	end
	if (
		( ALU_OUT_expected_prev[1] !== 1'bx ) && ( ALU_OUT_prev[1] !== ALU_OUT_expected_prev[1] )
		&& ((ALU_OUT_expected_prev[1] !== last_ALU_OUT_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[1] = ALU_OUT_expected_prev[1];
	end
	if (
		( ALU_OUT_expected_prev[2] !== 1'bx ) && ( ALU_OUT_prev[2] !== ALU_OUT_expected_prev[2] )
		&& ((ALU_OUT_expected_prev[2] !== last_ALU_OUT_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[2] = ALU_OUT_expected_prev[2];
	end
	if (
		( ALU_OUT_expected_prev[3] !== 1'bx ) && ( ALU_OUT_prev[3] !== ALU_OUT_expected_prev[3] )
		&& ((ALU_OUT_expected_prev[3] !== last_ALU_OUT_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[3] = ALU_OUT_expected_prev[3];
	end
	if (
		( ALU_OUT_expected_prev[4] !== 1'bx ) && ( ALU_OUT_prev[4] !== ALU_OUT_expected_prev[4] )
		&& ((ALU_OUT_expected_prev[4] !== last_ALU_OUT_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[4] = ALU_OUT_expected_prev[4];
	end
	if (
		( ALU_OUT_expected_prev[5] !== 1'bx ) && ( ALU_OUT_prev[5] !== ALU_OUT_expected_prev[5] )
		&& ((ALU_OUT_expected_prev[5] !== last_ALU_OUT_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[5] = ALU_OUT_expected_prev[5];
	end
	if (
		( ALU_OUT_expected_prev[6] !== 1'bx ) && ( ALU_OUT_prev[6] !== ALU_OUT_expected_prev[6] )
		&& ((ALU_OUT_expected_prev[6] !== last_ALU_OUT_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[6] = ALU_OUT_expected_prev[6];
	end
	if (
		( ALU_OUT_expected_prev[7] !== 1'bx ) && ( ALU_OUT_prev[7] !== ALU_OUT_expected_prev[7] )
		&& ((ALU_OUT_expected_prev[7] !== last_ALU_OUT_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[7] = ALU_OUT_expected_prev[7];
	end
	if (
		( ALU_OUT_expected_prev[8] !== 1'bx ) && ( ALU_OUT_prev[8] !== ALU_OUT_expected_prev[8] )
		&& ((ALU_OUT_expected_prev[8] !== last_ALU_OUT_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[8] = ALU_OUT_expected_prev[8];
	end
	if (
		( ALU_OUT_expected_prev[9] !== 1'bx ) && ( ALU_OUT_prev[9] !== ALU_OUT_expected_prev[9] )
		&& ((ALU_OUT_expected_prev[9] !== last_ALU_OUT_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[9] = ALU_OUT_expected_prev[9];
	end
	if (
		( ALU_OUT_expected_prev[10] !== 1'bx ) && ( ALU_OUT_prev[10] !== ALU_OUT_expected_prev[10] )
		&& ((ALU_OUT_expected_prev[10] !== last_ALU_OUT_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[10] = ALU_OUT_expected_prev[10];
	end
	if (
		( ALU_OUT_expected_prev[11] !== 1'bx ) && ( ALU_OUT_prev[11] !== ALU_OUT_expected_prev[11] )
		&& ((ALU_OUT_expected_prev[11] !== last_ALU_OUT_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[11] = ALU_OUT_expected_prev[11];
	end
	if (
		( ALU_OUT_expected_prev[12] !== 1'bx ) && ( ALU_OUT_prev[12] !== ALU_OUT_expected_prev[12] )
		&& ((ALU_OUT_expected_prev[12] !== last_ALU_OUT_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[12] = ALU_OUT_expected_prev[12];
	end
	if (
		( ALU_OUT_expected_prev[13] !== 1'bx ) && ( ALU_OUT_prev[13] !== ALU_OUT_expected_prev[13] )
		&& ((ALU_OUT_expected_prev[13] !== last_ALU_OUT_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[13] = ALU_OUT_expected_prev[13];
	end
	if (
		( ALU_OUT_expected_prev[14] !== 1'bx ) && ( ALU_OUT_prev[14] !== ALU_OUT_expected_prev[14] )
		&& ((ALU_OUT_expected_prev[14] !== last_ALU_OUT_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[14] = ALU_OUT_expected_prev[14];
	end
	if (
		( ALU_OUT_expected_prev[15] !== 1'bx ) && ( ALU_OUT_prev[15] !== ALU_OUT_expected_prev[15] )
		&& ((ALU_OUT_expected_prev[15] !== last_ALU_OUT_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[15] = ALU_OUT_expected_prev[15];
	end
	if (
		( ALU_OUT_expected_prev[16] !== 1'bx ) && ( ALU_OUT_prev[16] !== ALU_OUT_expected_prev[16] )
		&& ((ALU_OUT_expected_prev[16] !== last_ALU_OUT_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[16] = ALU_OUT_expected_prev[16];
	end
	if (
		( ALU_OUT_expected_prev[17] !== 1'bx ) && ( ALU_OUT_prev[17] !== ALU_OUT_expected_prev[17] )
		&& ((ALU_OUT_expected_prev[17] !== last_ALU_OUT_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[17] = ALU_OUT_expected_prev[17];
	end
	if (
		( ALU_OUT_expected_prev[18] !== 1'bx ) && ( ALU_OUT_prev[18] !== ALU_OUT_expected_prev[18] )
		&& ((ALU_OUT_expected_prev[18] !== last_ALU_OUT_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[18] = ALU_OUT_expected_prev[18];
	end
	if (
		( ALU_OUT_expected_prev[19] !== 1'bx ) && ( ALU_OUT_prev[19] !== ALU_OUT_expected_prev[19] )
		&& ((ALU_OUT_expected_prev[19] !== last_ALU_OUT_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[19] = ALU_OUT_expected_prev[19];
	end
	if (
		( ALU_OUT_expected_prev[20] !== 1'bx ) && ( ALU_OUT_prev[20] !== ALU_OUT_expected_prev[20] )
		&& ((ALU_OUT_expected_prev[20] !== last_ALU_OUT_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[20] = ALU_OUT_expected_prev[20];
	end
	if (
		( ALU_OUT_expected_prev[21] !== 1'bx ) && ( ALU_OUT_prev[21] !== ALU_OUT_expected_prev[21] )
		&& ((ALU_OUT_expected_prev[21] !== last_ALU_OUT_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[21] = ALU_OUT_expected_prev[21];
	end
	if (
		( ALU_OUT_expected_prev[22] !== 1'bx ) && ( ALU_OUT_prev[22] !== ALU_OUT_expected_prev[22] )
		&& ((ALU_OUT_expected_prev[22] !== last_ALU_OUT_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[22] = ALU_OUT_expected_prev[22];
	end
	if (
		( ALU_OUT_expected_prev[23] !== 1'bx ) && ( ALU_OUT_prev[23] !== ALU_OUT_expected_prev[23] )
		&& ((ALU_OUT_expected_prev[23] !== last_ALU_OUT_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[23] = ALU_OUT_expected_prev[23];
	end
	if (
		( ALU_OUT_expected_prev[24] !== 1'bx ) && ( ALU_OUT_prev[24] !== ALU_OUT_expected_prev[24] )
		&& ((ALU_OUT_expected_prev[24] !== last_ALU_OUT_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[24] = ALU_OUT_expected_prev[24];
	end
	if (
		( ALU_OUT_expected_prev[25] !== 1'bx ) && ( ALU_OUT_prev[25] !== ALU_OUT_expected_prev[25] )
		&& ((ALU_OUT_expected_prev[25] !== last_ALU_OUT_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[25] = ALU_OUT_expected_prev[25];
	end
	if (
		( ALU_OUT_expected_prev[26] !== 1'bx ) && ( ALU_OUT_prev[26] !== ALU_OUT_expected_prev[26] )
		&& ((ALU_OUT_expected_prev[26] !== last_ALU_OUT_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[26] = ALU_OUT_expected_prev[26];
	end
	if (
		( ALU_OUT_expected_prev[27] !== 1'bx ) && ( ALU_OUT_prev[27] !== ALU_OUT_expected_prev[27] )
		&& ((ALU_OUT_expected_prev[27] !== last_ALU_OUT_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[27] = ALU_OUT_expected_prev[27];
	end
	if (
		( ALU_OUT_expected_prev[28] !== 1'bx ) && ( ALU_OUT_prev[28] !== ALU_OUT_expected_prev[28] )
		&& ((ALU_OUT_expected_prev[28] !== last_ALU_OUT_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[28] = ALU_OUT_expected_prev[28];
	end
	if (
		( ALU_OUT_expected_prev[29] !== 1'bx ) && ( ALU_OUT_prev[29] !== ALU_OUT_expected_prev[29] )
		&& ((ALU_OUT_expected_prev[29] !== last_ALU_OUT_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[29] = ALU_OUT_expected_prev[29];
	end
	if (
		( ALU_OUT_expected_prev[30] !== 1'bx ) && ( ALU_OUT_prev[30] !== ALU_OUT_expected_prev[30] )
		&& ((ALU_OUT_expected_prev[30] !== last_ALU_OUT_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[30] = ALU_OUT_expected_prev[30];
	end
	if (
		( ALU_OUT_expected_prev[31] !== 1'bx ) && ( ALU_OUT_prev[31] !== ALU_OUT_expected_prev[31] )
		&& ((ALU_OUT_expected_prev[31] !== last_ALU_OUT_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[31] = ALU_OUT_expected_prev[31];
	end
	if (
		( INSTRUCTION1_expected_prev[0] !== 1'bx ) && ( INSTRUCTION1_prev[0] !== INSTRUCTION1_expected_prev[0] )
		&& ((INSTRUCTION1_expected_prev[0] !== last_INSTRUCTION1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCTION1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCTION1_expected_prev);
		$display ("     Real value = %b", INSTRUCTION1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCTION1_exp[0] = INSTRUCTION1_expected_prev[0];
	end
	if (
		( INSTRUCTION1_expected_prev[1] !== 1'bx ) && ( INSTRUCTION1_prev[1] !== INSTRUCTION1_expected_prev[1] )
		&& ((INSTRUCTION1_expected_prev[1] !== last_INSTRUCTION1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCTION1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCTION1_expected_prev);
		$display ("     Real value = %b", INSTRUCTION1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCTION1_exp[1] = INSTRUCTION1_expected_prev[1];
	end
	if (
		( INSTRUCTION1_expected_prev[2] !== 1'bx ) && ( INSTRUCTION1_prev[2] !== INSTRUCTION1_expected_prev[2] )
		&& ((INSTRUCTION1_expected_prev[2] !== last_INSTRUCTION1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCTION1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCTION1_expected_prev);
		$display ("     Real value = %b", INSTRUCTION1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCTION1_exp[2] = INSTRUCTION1_expected_prev[2];
	end
	if (
		( INSTRUCTION1_expected_prev[3] !== 1'bx ) && ( INSTRUCTION1_prev[3] !== INSTRUCTION1_expected_prev[3] )
		&& ((INSTRUCTION1_expected_prev[3] !== last_INSTRUCTION1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCTION1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCTION1_expected_prev);
		$display ("     Real value = %b", INSTRUCTION1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCTION1_exp[3] = INSTRUCTION1_expected_prev[3];
	end
	if (
		( INSTRUCTION1_expected_prev[4] !== 1'bx ) && ( INSTRUCTION1_prev[4] !== INSTRUCTION1_expected_prev[4] )
		&& ((INSTRUCTION1_expected_prev[4] !== last_INSTRUCTION1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCTION1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCTION1_expected_prev);
		$display ("     Real value = %b", INSTRUCTION1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCTION1_exp[4] = INSTRUCTION1_expected_prev[4];
	end
	if (
		( INSTRUCTION1_expected_prev[5] !== 1'bx ) && ( INSTRUCTION1_prev[5] !== INSTRUCTION1_expected_prev[5] )
		&& ((INSTRUCTION1_expected_prev[5] !== last_INSTRUCTION1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCTION1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCTION1_expected_prev);
		$display ("     Real value = %b", INSTRUCTION1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCTION1_exp[5] = INSTRUCTION1_expected_prev[5];
	end
	if (
		( INSTRUCTION1_expected_prev[6] !== 1'bx ) && ( INSTRUCTION1_prev[6] !== INSTRUCTION1_expected_prev[6] )
		&& ((INSTRUCTION1_expected_prev[6] !== last_INSTRUCTION1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCTION1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCTION1_expected_prev);
		$display ("     Real value = %b", INSTRUCTION1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCTION1_exp[6] = INSTRUCTION1_expected_prev[6];
	end
	if (
		( INSTRUCTION1_expected_prev[7] !== 1'bx ) && ( INSTRUCTION1_prev[7] !== INSTRUCTION1_expected_prev[7] )
		&& ((INSTRUCTION1_expected_prev[7] !== last_INSTRUCTION1_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCTION1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCTION1_expected_prev);
		$display ("     Real value = %b", INSTRUCTION1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCTION1_exp[7] = INSTRUCTION1_expected_prev[7];
	end
	if (
		( INSTRUCTION1_expected_prev[8] !== 1'bx ) && ( INSTRUCTION1_prev[8] !== INSTRUCTION1_expected_prev[8] )
		&& ((INSTRUCTION1_expected_prev[8] !== last_INSTRUCTION1_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCTION1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCTION1_expected_prev);
		$display ("     Real value = %b", INSTRUCTION1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCTION1_exp[8] = INSTRUCTION1_expected_prev[8];
	end
	if (
		( INSTRUCTION1_expected_prev[9] !== 1'bx ) && ( INSTRUCTION1_prev[9] !== INSTRUCTION1_expected_prev[9] )
		&& ((INSTRUCTION1_expected_prev[9] !== last_INSTRUCTION1_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCTION1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCTION1_expected_prev);
		$display ("     Real value = %b", INSTRUCTION1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCTION1_exp[9] = INSTRUCTION1_expected_prev[9];
	end
	if (
		( INSTRUCTION1_expected_prev[10] !== 1'bx ) && ( INSTRUCTION1_prev[10] !== INSTRUCTION1_expected_prev[10] )
		&& ((INSTRUCTION1_expected_prev[10] !== last_INSTRUCTION1_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCTION1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCTION1_expected_prev);
		$display ("     Real value = %b", INSTRUCTION1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCTION1_exp[10] = INSTRUCTION1_expected_prev[10];
	end
	if (
		( INSTRUCTION1_expected_prev[11] !== 1'bx ) && ( INSTRUCTION1_prev[11] !== INSTRUCTION1_expected_prev[11] )
		&& ((INSTRUCTION1_expected_prev[11] !== last_INSTRUCTION1_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCTION1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCTION1_expected_prev);
		$display ("     Real value = %b", INSTRUCTION1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCTION1_exp[11] = INSTRUCTION1_expected_prev[11];
	end
	if (
		( INSTRUCTION1_expected_prev[12] !== 1'bx ) && ( INSTRUCTION1_prev[12] !== INSTRUCTION1_expected_prev[12] )
		&& ((INSTRUCTION1_expected_prev[12] !== last_INSTRUCTION1_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCTION1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCTION1_expected_prev);
		$display ("     Real value = %b", INSTRUCTION1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCTION1_exp[12] = INSTRUCTION1_expected_prev[12];
	end
	if (
		( INSTRUCTION1_expected_prev[13] !== 1'bx ) && ( INSTRUCTION1_prev[13] !== INSTRUCTION1_expected_prev[13] )
		&& ((INSTRUCTION1_expected_prev[13] !== last_INSTRUCTION1_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCTION1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCTION1_expected_prev);
		$display ("     Real value = %b", INSTRUCTION1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCTION1_exp[13] = INSTRUCTION1_expected_prev[13];
	end
	if (
		( INSTRUCTION1_expected_prev[14] !== 1'bx ) && ( INSTRUCTION1_prev[14] !== INSTRUCTION1_expected_prev[14] )
		&& ((INSTRUCTION1_expected_prev[14] !== last_INSTRUCTION1_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCTION1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCTION1_expected_prev);
		$display ("     Real value = %b", INSTRUCTION1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCTION1_exp[14] = INSTRUCTION1_expected_prev[14];
	end
	if (
		( INSTRUCTION1_expected_prev[15] !== 1'bx ) && ( INSTRUCTION1_prev[15] !== INSTRUCTION1_expected_prev[15] )
		&& ((INSTRUCTION1_expected_prev[15] !== last_INSTRUCTION1_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCTION1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCTION1_expected_prev);
		$display ("     Real value = %b", INSTRUCTION1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCTION1_exp[15] = INSTRUCTION1_expected_prev[15];
	end
	if (
		( INSTRUCTION1_expected_prev[16] !== 1'bx ) && ( INSTRUCTION1_prev[16] !== INSTRUCTION1_expected_prev[16] )
		&& ((INSTRUCTION1_expected_prev[16] !== last_INSTRUCTION1_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCTION1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCTION1_expected_prev);
		$display ("     Real value = %b", INSTRUCTION1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCTION1_exp[16] = INSTRUCTION1_expected_prev[16];
	end
	if (
		( INSTRUCTION1_expected_prev[17] !== 1'bx ) && ( INSTRUCTION1_prev[17] !== INSTRUCTION1_expected_prev[17] )
		&& ((INSTRUCTION1_expected_prev[17] !== last_INSTRUCTION1_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCTION1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCTION1_expected_prev);
		$display ("     Real value = %b", INSTRUCTION1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCTION1_exp[17] = INSTRUCTION1_expected_prev[17];
	end
	if (
		( INSTRUCTION1_expected_prev[18] !== 1'bx ) && ( INSTRUCTION1_prev[18] !== INSTRUCTION1_expected_prev[18] )
		&& ((INSTRUCTION1_expected_prev[18] !== last_INSTRUCTION1_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCTION1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCTION1_expected_prev);
		$display ("     Real value = %b", INSTRUCTION1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCTION1_exp[18] = INSTRUCTION1_expected_prev[18];
	end
	if (
		( INSTRUCTION1_expected_prev[19] !== 1'bx ) && ( INSTRUCTION1_prev[19] !== INSTRUCTION1_expected_prev[19] )
		&& ((INSTRUCTION1_expected_prev[19] !== last_INSTRUCTION1_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCTION1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCTION1_expected_prev);
		$display ("     Real value = %b", INSTRUCTION1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCTION1_exp[19] = INSTRUCTION1_expected_prev[19];
	end
	if (
		( INSTRUCTION1_expected_prev[20] !== 1'bx ) && ( INSTRUCTION1_prev[20] !== INSTRUCTION1_expected_prev[20] )
		&& ((INSTRUCTION1_expected_prev[20] !== last_INSTRUCTION1_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCTION1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCTION1_expected_prev);
		$display ("     Real value = %b", INSTRUCTION1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCTION1_exp[20] = INSTRUCTION1_expected_prev[20];
	end
	if (
		( INSTRUCTION1_expected_prev[21] !== 1'bx ) && ( INSTRUCTION1_prev[21] !== INSTRUCTION1_expected_prev[21] )
		&& ((INSTRUCTION1_expected_prev[21] !== last_INSTRUCTION1_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCTION1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCTION1_expected_prev);
		$display ("     Real value = %b", INSTRUCTION1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCTION1_exp[21] = INSTRUCTION1_expected_prev[21];
	end
	if (
		( INSTRUCTION1_expected_prev[22] !== 1'bx ) && ( INSTRUCTION1_prev[22] !== INSTRUCTION1_expected_prev[22] )
		&& ((INSTRUCTION1_expected_prev[22] !== last_INSTRUCTION1_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCTION1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCTION1_expected_prev);
		$display ("     Real value = %b", INSTRUCTION1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCTION1_exp[22] = INSTRUCTION1_expected_prev[22];
	end
	if (
		( INSTRUCTION1_expected_prev[23] !== 1'bx ) && ( INSTRUCTION1_prev[23] !== INSTRUCTION1_expected_prev[23] )
		&& ((INSTRUCTION1_expected_prev[23] !== last_INSTRUCTION1_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCTION1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCTION1_expected_prev);
		$display ("     Real value = %b", INSTRUCTION1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCTION1_exp[23] = INSTRUCTION1_expected_prev[23];
	end
	if (
		( INSTRUCTION1_expected_prev[24] !== 1'bx ) && ( INSTRUCTION1_prev[24] !== INSTRUCTION1_expected_prev[24] )
		&& ((INSTRUCTION1_expected_prev[24] !== last_INSTRUCTION1_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCTION1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCTION1_expected_prev);
		$display ("     Real value = %b", INSTRUCTION1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCTION1_exp[24] = INSTRUCTION1_expected_prev[24];
	end
	if (
		( INSTRUCTION1_expected_prev[25] !== 1'bx ) && ( INSTRUCTION1_prev[25] !== INSTRUCTION1_expected_prev[25] )
		&& ((INSTRUCTION1_expected_prev[25] !== last_INSTRUCTION1_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCTION1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCTION1_expected_prev);
		$display ("     Real value = %b", INSTRUCTION1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCTION1_exp[25] = INSTRUCTION1_expected_prev[25];
	end
	if (
		( INSTRUCTION1_expected_prev[26] !== 1'bx ) && ( INSTRUCTION1_prev[26] !== INSTRUCTION1_expected_prev[26] )
		&& ((INSTRUCTION1_expected_prev[26] !== last_INSTRUCTION1_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCTION1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCTION1_expected_prev);
		$display ("     Real value = %b", INSTRUCTION1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCTION1_exp[26] = INSTRUCTION1_expected_prev[26];
	end
	if (
		( INSTRUCTION1_expected_prev[27] !== 1'bx ) && ( INSTRUCTION1_prev[27] !== INSTRUCTION1_expected_prev[27] )
		&& ((INSTRUCTION1_expected_prev[27] !== last_INSTRUCTION1_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCTION1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCTION1_expected_prev);
		$display ("     Real value = %b", INSTRUCTION1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCTION1_exp[27] = INSTRUCTION1_expected_prev[27];
	end
	if (
		( INSTRUCTION1_expected_prev[28] !== 1'bx ) && ( INSTRUCTION1_prev[28] !== INSTRUCTION1_expected_prev[28] )
		&& ((INSTRUCTION1_expected_prev[28] !== last_INSTRUCTION1_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCTION1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCTION1_expected_prev);
		$display ("     Real value = %b", INSTRUCTION1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCTION1_exp[28] = INSTRUCTION1_expected_prev[28];
	end
	if (
		( INSTRUCTION1_expected_prev[29] !== 1'bx ) && ( INSTRUCTION1_prev[29] !== INSTRUCTION1_expected_prev[29] )
		&& ((INSTRUCTION1_expected_prev[29] !== last_INSTRUCTION1_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCTION1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCTION1_expected_prev);
		$display ("     Real value = %b", INSTRUCTION1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCTION1_exp[29] = INSTRUCTION1_expected_prev[29];
	end
	if (
		( INSTRUCTION1_expected_prev[30] !== 1'bx ) && ( INSTRUCTION1_prev[30] !== INSTRUCTION1_expected_prev[30] )
		&& ((INSTRUCTION1_expected_prev[30] !== last_INSTRUCTION1_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCTION1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCTION1_expected_prev);
		$display ("     Real value = %b", INSTRUCTION1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCTION1_exp[30] = INSTRUCTION1_expected_prev[30];
	end
	if (
		( INSTRUCTION1_expected_prev[31] !== 1'bx ) && ( INSTRUCTION1_prev[31] !== INSTRUCTION1_expected_prev[31] )
		&& ((INSTRUCTION1_expected_prev[31] !== last_INSTRUCTION1_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCTION1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCTION1_expected_prev);
		$display ("     Real value = %b", INSTRUCTION1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCTION1_exp[31] = INSTRUCTION1_expected_prev[31];
	end
	if (
		( PC_expected_prev[0] !== 1'bx ) && ( PC_prev[0] !== PC_expected_prev[0] )
		&& ((PC_expected_prev[0] !== last_PC_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[0] = PC_expected_prev[0];
	end
	if (
		( PC_expected_prev[1] !== 1'bx ) && ( PC_prev[1] !== PC_expected_prev[1] )
		&& ((PC_expected_prev[1] !== last_PC_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[1] = PC_expected_prev[1];
	end
	if (
		( PC_expected_prev[2] !== 1'bx ) && ( PC_prev[2] !== PC_expected_prev[2] )
		&& ((PC_expected_prev[2] !== last_PC_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[2] = PC_expected_prev[2];
	end
	if (
		( PC_expected_prev[3] !== 1'bx ) && ( PC_prev[3] !== PC_expected_prev[3] )
		&& ((PC_expected_prev[3] !== last_PC_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[3] = PC_expected_prev[3];
	end
	if (
		( PC_expected_prev[4] !== 1'bx ) && ( PC_prev[4] !== PC_expected_prev[4] )
		&& ((PC_expected_prev[4] !== last_PC_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[4] = PC_expected_prev[4];
	end
	if (
		( PC_expected_prev[5] !== 1'bx ) && ( PC_prev[5] !== PC_expected_prev[5] )
		&& ((PC_expected_prev[5] !== last_PC_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[5] = PC_expected_prev[5];
	end
	if (
		( PC_expected_prev[6] !== 1'bx ) && ( PC_prev[6] !== PC_expected_prev[6] )
		&& ((PC_expected_prev[6] !== last_PC_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[6] = PC_expected_prev[6];
	end
	if (
		( PC_expected_prev[7] !== 1'bx ) && ( PC_prev[7] !== PC_expected_prev[7] )
		&& ((PC_expected_prev[7] !== last_PC_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[7] = PC_expected_prev[7];
	end
	if (
		( PC_expected_prev[8] !== 1'bx ) && ( PC_prev[8] !== PC_expected_prev[8] )
		&& ((PC_expected_prev[8] !== last_PC_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[8] = PC_expected_prev[8];
	end
	if (
		( PC_expected_prev[9] !== 1'bx ) && ( PC_prev[9] !== PC_expected_prev[9] )
		&& ((PC_expected_prev[9] !== last_PC_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[9] = PC_expected_prev[9];
	end
	if (
		( PC_expected_prev[10] !== 1'bx ) && ( PC_prev[10] !== PC_expected_prev[10] )
		&& ((PC_expected_prev[10] !== last_PC_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[10] = PC_expected_prev[10];
	end
	if (
		( PC_expected_prev[11] !== 1'bx ) && ( PC_prev[11] !== PC_expected_prev[11] )
		&& ((PC_expected_prev[11] !== last_PC_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[11] = PC_expected_prev[11];
	end
	if (
		( PC_expected_prev[12] !== 1'bx ) && ( PC_prev[12] !== PC_expected_prev[12] )
		&& ((PC_expected_prev[12] !== last_PC_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[12] = PC_expected_prev[12];
	end
	if (
		( PC_expected_prev[13] !== 1'bx ) && ( PC_prev[13] !== PC_expected_prev[13] )
		&& ((PC_expected_prev[13] !== last_PC_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[13] = PC_expected_prev[13];
	end
	if (
		( PC_expected_prev[14] !== 1'bx ) && ( PC_prev[14] !== PC_expected_prev[14] )
		&& ((PC_expected_prev[14] !== last_PC_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[14] = PC_expected_prev[14];
	end
	if (
		( PC_expected_prev[15] !== 1'bx ) && ( PC_prev[15] !== PC_expected_prev[15] )
		&& ((PC_expected_prev[15] !== last_PC_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[15] = PC_expected_prev[15];
	end
	if (
		( PC_expected_prev[16] !== 1'bx ) && ( PC_prev[16] !== PC_expected_prev[16] )
		&& ((PC_expected_prev[16] !== last_PC_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[16] = PC_expected_prev[16];
	end
	if (
		( PC_expected_prev[17] !== 1'bx ) && ( PC_prev[17] !== PC_expected_prev[17] )
		&& ((PC_expected_prev[17] !== last_PC_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[17] = PC_expected_prev[17];
	end
	if (
		( PC_expected_prev[18] !== 1'bx ) && ( PC_prev[18] !== PC_expected_prev[18] )
		&& ((PC_expected_prev[18] !== last_PC_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[18] = PC_expected_prev[18];
	end
	if (
		( PC_expected_prev[19] !== 1'bx ) && ( PC_prev[19] !== PC_expected_prev[19] )
		&& ((PC_expected_prev[19] !== last_PC_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[19] = PC_expected_prev[19];
	end
	if (
		( PC_expected_prev[20] !== 1'bx ) && ( PC_prev[20] !== PC_expected_prev[20] )
		&& ((PC_expected_prev[20] !== last_PC_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[20] = PC_expected_prev[20];
	end
	if (
		( PC_expected_prev[21] !== 1'bx ) && ( PC_prev[21] !== PC_expected_prev[21] )
		&& ((PC_expected_prev[21] !== last_PC_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[21] = PC_expected_prev[21];
	end
	if (
		( PC_expected_prev[22] !== 1'bx ) && ( PC_prev[22] !== PC_expected_prev[22] )
		&& ((PC_expected_prev[22] !== last_PC_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[22] = PC_expected_prev[22];
	end
	if (
		( PC_expected_prev[23] !== 1'bx ) && ( PC_prev[23] !== PC_expected_prev[23] )
		&& ((PC_expected_prev[23] !== last_PC_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[23] = PC_expected_prev[23];
	end
	if (
		( PC_expected_prev[24] !== 1'bx ) && ( PC_prev[24] !== PC_expected_prev[24] )
		&& ((PC_expected_prev[24] !== last_PC_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[24] = PC_expected_prev[24];
	end
	if (
		( PC_expected_prev[25] !== 1'bx ) && ( PC_prev[25] !== PC_expected_prev[25] )
		&& ((PC_expected_prev[25] !== last_PC_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[25] = PC_expected_prev[25];
	end
	if (
		( PC_expected_prev[26] !== 1'bx ) && ( PC_prev[26] !== PC_expected_prev[26] )
		&& ((PC_expected_prev[26] !== last_PC_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[26] = PC_expected_prev[26];
	end
	if (
		( PC_expected_prev[27] !== 1'bx ) && ( PC_prev[27] !== PC_expected_prev[27] )
		&& ((PC_expected_prev[27] !== last_PC_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[27] = PC_expected_prev[27];
	end
	if (
		( PC_expected_prev[28] !== 1'bx ) && ( PC_prev[28] !== PC_expected_prev[28] )
		&& ((PC_expected_prev[28] !== last_PC_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[28] = PC_expected_prev[28];
	end
	if (
		( PC_expected_prev[29] !== 1'bx ) && ( PC_prev[29] !== PC_expected_prev[29] )
		&& ((PC_expected_prev[29] !== last_PC_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[29] = PC_expected_prev[29];
	end
	if (
		( PC_expected_prev[30] !== 1'bx ) && ( PC_prev[30] !== PC_expected_prev[30] )
		&& ((PC_expected_prev[30] !== last_PC_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[30] = PC_expected_prev[30];
	end
	if (
		( PC_expected_prev[31] !== 1'bx ) && ( PC_prev[31] !== PC_expected_prev[31] )
		&& ((PC_expected_prev[31] !== last_PC_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[31] = PC_expected_prev[31];
	end
	if (
		( REG_WR_expected_prev !== 1'bx ) && ( REG_WR_prev !== REG_WR_expected_prev )
		&& ((REG_WR_expected_prev !== last_REG_WR_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_WR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_WR_expected_prev);
		$display ("     Real value = %b", REG_WR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_REG_WR_exp = REG_WR_expected_prev;
	end
	if (
		( RS1_VALUE_expected_prev[0] !== 1'bx ) && ( RS1_VALUE_prev[0] !== RS1_VALUE_expected_prev[0] )
		&& ((RS1_VALUE_expected_prev[0] !== last_RS1_VALUE_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS1_VALUE[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS1_VALUE_expected_prev);
		$display ("     Real value = %b", RS1_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS1_VALUE_exp[0] = RS1_VALUE_expected_prev[0];
	end
	if (
		( RS1_VALUE_expected_prev[1] !== 1'bx ) && ( RS1_VALUE_prev[1] !== RS1_VALUE_expected_prev[1] )
		&& ((RS1_VALUE_expected_prev[1] !== last_RS1_VALUE_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS1_VALUE[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS1_VALUE_expected_prev);
		$display ("     Real value = %b", RS1_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS1_VALUE_exp[1] = RS1_VALUE_expected_prev[1];
	end
	if (
		( RS1_VALUE_expected_prev[2] !== 1'bx ) && ( RS1_VALUE_prev[2] !== RS1_VALUE_expected_prev[2] )
		&& ((RS1_VALUE_expected_prev[2] !== last_RS1_VALUE_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS1_VALUE[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS1_VALUE_expected_prev);
		$display ("     Real value = %b", RS1_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS1_VALUE_exp[2] = RS1_VALUE_expected_prev[2];
	end
	if (
		( RS1_VALUE_expected_prev[3] !== 1'bx ) && ( RS1_VALUE_prev[3] !== RS1_VALUE_expected_prev[3] )
		&& ((RS1_VALUE_expected_prev[3] !== last_RS1_VALUE_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS1_VALUE[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS1_VALUE_expected_prev);
		$display ("     Real value = %b", RS1_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS1_VALUE_exp[3] = RS1_VALUE_expected_prev[3];
	end
	if (
		( RS1_VALUE_expected_prev[4] !== 1'bx ) && ( RS1_VALUE_prev[4] !== RS1_VALUE_expected_prev[4] )
		&& ((RS1_VALUE_expected_prev[4] !== last_RS1_VALUE_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS1_VALUE[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS1_VALUE_expected_prev);
		$display ("     Real value = %b", RS1_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS1_VALUE_exp[4] = RS1_VALUE_expected_prev[4];
	end
	if (
		( RS1_VALUE_expected_prev[5] !== 1'bx ) && ( RS1_VALUE_prev[5] !== RS1_VALUE_expected_prev[5] )
		&& ((RS1_VALUE_expected_prev[5] !== last_RS1_VALUE_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS1_VALUE[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS1_VALUE_expected_prev);
		$display ("     Real value = %b", RS1_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS1_VALUE_exp[5] = RS1_VALUE_expected_prev[5];
	end
	if (
		( RS1_VALUE_expected_prev[6] !== 1'bx ) && ( RS1_VALUE_prev[6] !== RS1_VALUE_expected_prev[6] )
		&& ((RS1_VALUE_expected_prev[6] !== last_RS1_VALUE_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS1_VALUE[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS1_VALUE_expected_prev);
		$display ("     Real value = %b", RS1_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS1_VALUE_exp[6] = RS1_VALUE_expected_prev[6];
	end
	if (
		( RS1_VALUE_expected_prev[7] !== 1'bx ) && ( RS1_VALUE_prev[7] !== RS1_VALUE_expected_prev[7] )
		&& ((RS1_VALUE_expected_prev[7] !== last_RS1_VALUE_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS1_VALUE[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS1_VALUE_expected_prev);
		$display ("     Real value = %b", RS1_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS1_VALUE_exp[7] = RS1_VALUE_expected_prev[7];
	end
	if (
		( RS1_VALUE_expected_prev[8] !== 1'bx ) && ( RS1_VALUE_prev[8] !== RS1_VALUE_expected_prev[8] )
		&& ((RS1_VALUE_expected_prev[8] !== last_RS1_VALUE_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS1_VALUE[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS1_VALUE_expected_prev);
		$display ("     Real value = %b", RS1_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS1_VALUE_exp[8] = RS1_VALUE_expected_prev[8];
	end
	if (
		( RS1_VALUE_expected_prev[9] !== 1'bx ) && ( RS1_VALUE_prev[9] !== RS1_VALUE_expected_prev[9] )
		&& ((RS1_VALUE_expected_prev[9] !== last_RS1_VALUE_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS1_VALUE[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS1_VALUE_expected_prev);
		$display ("     Real value = %b", RS1_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS1_VALUE_exp[9] = RS1_VALUE_expected_prev[9];
	end
	if (
		( RS1_VALUE_expected_prev[10] !== 1'bx ) && ( RS1_VALUE_prev[10] !== RS1_VALUE_expected_prev[10] )
		&& ((RS1_VALUE_expected_prev[10] !== last_RS1_VALUE_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS1_VALUE[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS1_VALUE_expected_prev);
		$display ("     Real value = %b", RS1_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS1_VALUE_exp[10] = RS1_VALUE_expected_prev[10];
	end
	if (
		( RS1_VALUE_expected_prev[11] !== 1'bx ) && ( RS1_VALUE_prev[11] !== RS1_VALUE_expected_prev[11] )
		&& ((RS1_VALUE_expected_prev[11] !== last_RS1_VALUE_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS1_VALUE[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS1_VALUE_expected_prev);
		$display ("     Real value = %b", RS1_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS1_VALUE_exp[11] = RS1_VALUE_expected_prev[11];
	end
	if (
		( RS1_VALUE_expected_prev[12] !== 1'bx ) && ( RS1_VALUE_prev[12] !== RS1_VALUE_expected_prev[12] )
		&& ((RS1_VALUE_expected_prev[12] !== last_RS1_VALUE_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS1_VALUE[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS1_VALUE_expected_prev);
		$display ("     Real value = %b", RS1_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS1_VALUE_exp[12] = RS1_VALUE_expected_prev[12];
	end
	if (
		( RS1_VALUE_expected_prev[13] !== 1'bx ) && ( RS1_VALUE_prev[13] !== RS1_VALUE_expected_prev[13] )
		&& ((RS1_VALUE_expected_prev[13] !== last_RS1_VALUE_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS1_VALUE[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS1_VALUE_expected_prev);
		$display ("     Real value = %b", RS1_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS1_VALUE_exp[13] = RS1_VALUE_expected_prev[13];
	end
	if (
		( RS1_VALUE_expected_prev[14] !== 1'bx ) && ( RS1_VALUE_prev[14] !== RS1_VALUE_expected_prev[14] )
		&& ((RS1_VALUE_expected_prev[14] !== last_RS1_VALUE_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS1_VALUE[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS1_VALUE_expected_prev);
		$display ("     Real value = %b", RS1_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS1_VALUE_exp[14] = RS1_VALUE_expected_prev[14];
	end
	if (
		( RS1_VALUE_expected_prev[15] !== 1'bx ) && ( RS1_VALUE_prev[15] !== RS1_VALUE_expected_prev[15] )
		&& ((RS1_VALUE_expected_prev[15] !== last_RS1_VALUE_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS1_VALUE[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS1_VALUE_expected_prev);
		$display ("     Real value = %b", RS1_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS1_VALUE_exp[15] = RS1_VALUE_expected_prev[15];
	end
	if (
		( RS1_VALUE_expected_prev[16] !== 1'bx ) && ( RS1_VALUE_prev[16] !== RS1_VALUE_expected_prev[16] )
		&& ((RS1_VALUE_expected_prev[16] !== last_RS1_VALUE_exp[16]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS1_VALUE[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS1_VALUE_expected_prev);
		$display ("     Real value = %b", RS1_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS1_VALUE_exp[16] = RS1_VALUE_expected_prev[16];
	end
	if (
		( RS1_VALUE_expected_prev[17] !== 1'bx ) && ( RS1_VALUE_prev[17] !== RS1_VALUE_expected_prev[17] )
		&& ((RS1_VALUE_expected_prev[17] !== last_RS1_VALUE_exp[17]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS1_VALUE[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS1_VALUE_expected_prev);
		$display ("     Real value = %b", RS1_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS1_VALUE_exp[17] = RS1_VALUE_expected_prev[17];
	end
	if (
		( RS1_VALUE_expected_prev[18] !== 1'bx ) && ( RS1_VALUE_prev[18] !== RS1_VALUE_expected_prev[18] )
		&& ((RS1_VALUE_expected_prev[18] !== last_RS1_VALUE_exp[18]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS1_VALUE[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS1_VALUE_expected_prev);
		$display ("     Real value = %b", RS1_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS1_VALUE_exp[18] = RS1_VALUE_expected_prev[18];
	end
	if (
		( RS1_VALUE_expected_prev[19] !== 1'bx ) && ( RS1_VALUE_prev[19] !== RS1_VALUE_expected_prev[19] )
		&& ((RS1_VALUE_expected_prev[19] !== last_RS1_VALUE_exp[19]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS1_VALUE[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS1_VALUE_expected_prev);
		$display ("     Real value = %b", RS1_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS1_VALUE_exp[19] = RS1_VALUE_expected_prev[19];
	end
	if (
		( RS1_VALUE_expected_prev[20] !== 1'bx ) && ( RS1_VALUE_prev[20] !== RS1_VALUE_expected_prev[20] )
		&& ((RS1_VALUE_expected_prev[20] !== last_RS1_VALUE_exp[20]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS1_VALUE[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS1_VALUE_expected_prev);
		$display ("     Real value = %b", RS1_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS1_VALUE_exp[20] = RS1_VALUE_expected_prev[20];
	end
	if (
		( RS1_VALUE_expected_prev[21] !== 1'bx ) && ( RS1_VALUE_prev[21] !== RS1_VALUE_expected_prev[21] )
		&& ((RS1_VALUE_expected_prev[21] !== last_RS1_VALUE_exp[21]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS1_VALUE[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS1_VALUE_expected_prev);
		$display ("     Real value = %b", RS1_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS1_VALUE_exp[21] = RS1_VALUE_expected_prev[21];
	end
	if (
		( RS1_VALUE_expected_prev[22] !== 1'bx ) && ( RS1_VALUE_prev[22] !== RS1_VALUE_expected_prev[22] )
		&& ((RS1_VALUE_expected_prev[22] !== last_RS1_VALUE_exp[22]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS1_VALUE[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS1_VALUE_expected_prev);
		$display ("     Real value = %b", RS1_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS1_VALUE_exp[22] = RS1_VALUE_expected_prev[22];
	end
	if (
		( RS1_VALUE_expected_prev[23] !== 1'bx ) && ( RS1_VALUE_prev[23] !== RS1_VALUE_expected_prev[23] )
		&& ((RS1_VALUE_expected_prev[23] !== last_RS1_VALUE_exp[23]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS1_VALUE[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS1_VALUE_expected_prev);
		$display ("     Real value = %b", RS1_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS1_VALUE_exp[23] = RS1_VALUE_expected_prev[23];
	end
	if (
		( RS1_VALUE_expected_prev[24] !== 1'bx ) && ( RS1_VALUE_prev[24] !== RS1_VALUE_expected_prev[24] )
		&& ((RS1_VALUE_expected_prev[24] !== last_RS1_VALUE_exp[24]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS1_VALUE[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS1_VALUE_expected_prev);
		$display ("     Real value = %b", RS1_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS1_VALUE_exp[24] = RS1_VALUE_expected_prev[24];
	end
	if (
		( RS1_VALUE_expected_prev[25] !== 1'bx ) && ( RS1_VALUE_prev[25] !== RS1_VALUE_expected_prev[25] )
		&& ((RS1_VALUE_expected_prev[25] !== last_RS1_VALUE_exp[25]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS1_VALUE[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS1_VALUE_expected_prev);
		$display ("     Real value = %b", RS1_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS1_VALUE_exp[25] = RS1_VALUE_expected_prev[25];
	end
	if (
		( RS1_VALUE_expected_prev[26] !== 1'bx ) && ( RS1_VALUE_prev[26] !== RS1_VALUE_expected_prev[26] )
		&& ((RS1_VALUE_expected_prev[26] !== last_RS1_VALUE_exp[26]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS1_VALUE[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS1_VALUE_expected_prev);
		$display ("     Real value = %b", RS1_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS1_VALUE_exp[26] = RS1_VALUE_expected_prev[26];
	end
	if (
		( RS1_VALUE_expected_prev[27] !== 1'bx ) && ( RS1_VALUE_prev[27] !== RS1_VALUE_expected_prev[27] )
		&& ((RS1_VALUE_expected_prev[27] !== last_RS1_VALUE_exp[27]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS1_VALUE[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS1_VALUE_expected_prev);
		$display ("     Real value = %b", RS1_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS1_VALUE_exp[27] = RS1_VALUE_expected_prev[27];
	end
	if (
		( RS1_VALUE_expected_prev[28] !== 1'bx ) && ( RS1_VALUE_prev[28] !== RS1_VALUE_expected_prev[28] )
		&& ((RS1_VALUE_expected_prev[28] !== last_RS1_VALUE_exp[28]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS1_VALUE[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS1_VALUE_expected_prev);
		$display ("     Real value = %b", RS1_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS1_VALUE_exp[28] = RS1_VALUE_expected_prev[28];
	end
	if (
		( RS1_VALUE_expected_prev[29] !== 1'bx ) && ( RS1_VALUE_prev[29] !== RS1_VALUE_expected_prev[29] )
		&& ((RS1_VALUE_expected_prev[29] !== last_RS1_VALUE_exp[29]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS1_VALUE[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS1_VALUE_expected_prev);
		$display ("     Real value = %b", RS1_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS1_VALUE_exp[29] = RS1_VALUE_expected_prev[29];
	end
	if (
		( RS1_VALUE_expected_prev[30] !== 1'bx ) && ( RS1_VALUE_prev[30] !== RS1_VALUE_expected_prev[30] )
		&& ((RS1_VALUE_expected_prev[30] !== last_RS1_VALUE_exp[30]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS1_VALUE[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS1_VALUE_expected_prev);
		$display ("     Real value = %b", RS1_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS1_VALUE_exp[30] = RS1_VALUE_expected_prev[30];
	end
	if (
		( RS1_VALUE_expected_prev[31] !== 1'bx ) && ( RS1_VALUE_prev[31] !== RS1_VALUE_expected_prev[31] )
		&& ((RS1_VALUE_expected_prev[31] !== last_RS1_VALUE_exp[31]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS1_VALUE[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS1_VALUE_expected_prev);
		$display ("     Real value = %b", RS1_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS1_VALUE_exp[31] = RS1_VALUE_expected_prev[31];
	end
	if (
		( RS2_VALUE_expected_prev[0] !== 1'bx ) && ( RS2_VALUE_prev[0] !== RS2_VALUE_expected_prev[0] )
		&& ((RS2_VALUE_expected_prev[0] !== last_RS2_VALUE_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS2_VALUE[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS2_VALUE_expected_prev);
		$display ("     Real value = %b", RS2_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RS2_VALUE_exp[0] = RS2_VALUE_expected_prev[0];
	end
	if (
		( RS2_VALUE_expected_prev[1] !== 1'bx ) && ( RS2_VALUE_prev[1] !== RS2_VALUE_expected_prev[1] )
		&& ((RS2_VALUE_expected_prev[1] !== last_RS2_VALUE_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS2_VALUE[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS2_VALUE_expected_prev);
		$display ("     Real value = %b", RS2_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RS2_VALUE_exp[1] = RS2_VALUE_expected_prev[1];
	end
	if (
		( RS2_VALUE_expected_prev[2] !== 1'bx ) && ( RS2_VALUE_prev[2] !== RS2_VALUE_expected_prev[2] )
		&& ((RS2_VALUE_expected_prev[2] !== last_RS2_VALUE_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS2_VALUE[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS2_VALUE_expected_prev);
		$display ("     Real value = %b", RS2_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RS2_VALUE_exp[2] = RS2_VALUE_expected_prev[2];
	end
	if (
		( RS2_VALUE_expected_prev[3] !== 1'bx ) && ( RS2_VALUE_prev[3] !== RS2_VALUE_expected_prev[3] )
		&& ((RS2_VALUE_expected_prev[3] !== last_RS2_VALUE_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS2_VALUE[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS2_VALUE_expected_prev);
		$display ("     Real value = %b", RS2_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RS2_VALUE_exp[3] = RS2_VALUE_expected_prev[3];
	end
	if (
		( RS2_VALUE_expected_prev[4] !== 1'bx ) && ( RS2_VALUE_prev[4] !== RS2_VALUE_expected_prev[4] )
		&& ((RS2_VALUE_expected_prev[4] !== last_RS2_VALUE_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS2_VALUE[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS2_VALUE_expected_prev);
		$display ("     Real value = %b", RS2_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RS2_VALUE_exp[4] = RS2_VALUE_expected_prev[4];
	end
	if (
		( RS2_VALUE_expected_prev[5] !== 1'bx ) && ( RS2_VALUE_prev[5] !== RS2_VALUE_expected_prev[5] )
		&& ((RS2_VALUE_expected_prev[5] !== last_RS2_VALUE_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS2_VALUE[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS2_VALUE_expected_prev);
		$display ("     Real value = %b", RS2_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RS2_VALUE_exp[5] = RS2_VALUE_expected_prev[5];
	end
	if (
		( RS2_VALUE_expected_prev[6] !== 1'bx ) && ( RS2_VALUE_prev[6] !== RS2_VALUE_expected_prev[6] )
		&& ((RS2_VALUE_expected_prev[6] !== last_RS2_VALUE_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS2_VALUE[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS2_VALUE_expected_prev);
		$display ("     Real value = %b", RS2_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RS2_VALUE_exp[6] = RS2_VALUE_expected_prev[6];
	end
	if (
		( RS2_VALUE_expected_prev[7] !== 1'bx ) && ( RS2_VALUE_prev[7] !== RS2_VALUE_expected_prev[7] )
		&& ((RS2_VALUE_expected_prev[7] !== last_RS2_VALUE_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS2_VALUE[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS2_VALUE_expected_prev);
		$display ("     Real value = %b", RS2_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RS2_VALUE_exp[7] = RS2_VALUE_expected_prev[7];
	end
	if (
		( RS2_VALUE_expected_prev[8] !== 1'bx ) && ( RS2_VALUE_prev[8] !== RS2_VALUE_expected_prev[8] )
		&& ((RS2_VALUE_expected_prev[8] !== last_RS2_VALUE_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS2_VALUE[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS2_VALUE_expected_prev);
		$display ("     Real value = %b", RS2_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RS2_VALUE_exp[8] = RS2_VALUE_expected_prev[8];
	end
	if (
		( RS2_VALUE_expected_prev[9] !== 1'bx ) && ( RS2_VALUE_prev[9] !== RS2_VALUE_expected_prev[9] )
		&& ((RS2_VALUE_expected_prev[9] !== last_RS2_VALUE_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS2_VALUE[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS2_VALUE_expected_prev);
		$display ("     Real value = %b", RS2_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RS2_VALUE_exp[9] = RS2_VALUE_expected_prev[9];
	end
	if (
		( RS2_VALUE_expected_prev[10] !== 1'bx ) && ( RS2_VALUE_prev[10] !== RS2_VALUE_expected_prev[10] )
		&& ((RS2_VALUE_expected_prev[10] !== last_RS2_VALUE_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS2_VALUE[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS2_VALUE_expected_prev);
		$display ("     Real value = %b", RS2_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RS2_VALUE_exp[10] = RS2_VALUE_expected_prev[10];
	end
	if (
		( RS2_VALUE_expected_prev[11] !== 1'bx ) && ( RS2_VALUE_prev[11] !== RS2_VALUE_expected_prev[11] )
		&& ((RS2_VALUE_expected_prev[11] !== last_RS2_VALUE_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS2_VALUE[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS2_VALUE_expected_prev);
		$display ("     Real value = %b", RS2_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RS2_VALUE_exp[11] = RS2_VALUE_expected_prev[11];
	end
	if (
		( RS2_VALUE_expected_prev[12] !== 1'bx ) && ( RS2_VALUE_prev[12] !== RS2_VALUE_expected_prev[12] )
		&& ((RS2_VALUE_expected_prev[12] !== last_RS2_VALUE_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS2_VALUE[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS2_VALUE_expected_prev);
		$display ("     Real value = %b", RS2_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RS2_VALUE_exp[12] = RS2_VALUE_expected_prev[12];
	end
	if (
		( RS2_VALUE_expected_prev[13] !== 1'bx ) && ( RS2_VALUE_prev[13] !== RS2_VALUE_expected_prev[13] )
		&& ((RS2_VALUE_expected_prev[13] !== last_RS2_VALUE_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS2_VALUE[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS2_VALUE_expected_prev);
		$display ("     Real value = %b", RS2_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RS2_VALUE_exp[13] = RS2_VALUE_expected_prev[13];
	end
	if (
		( RS2_VALUE_expected_prev[14] !== 1'bx ) && ( RS2_VALUE_prev[14] !== RS2_VALUE_expected_prev[14] )
		&& ((RS2_VALUE_expected_prev[14] !== last_RS2_VALUE_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS2_VALUE[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS2_VALUE_expected_prev);
		$display ("     Real value = %b", RS2_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RS2_VALUE_exp[14] = RS2_VALUE_expected_prev[14];
	end
	if (
		( RS2_VALUE_expected_prev[15] !== 1'bx ) && ( RS2_VALUE_prev[15] !== RS2_VALUE_expected_prev[15] )
		&& ((RS2_VALUE_expected_prev[15] !== last_RS2_VALUE_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS2_VALUE[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS2_VALUE_expected_prev);
		$display ("     Real value = %b", RS2_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RS2_VALUE_exp[15] = RS2_VALUE_expected_prev[15];
	end
	if (
		( RS2_VALUE_expected_prev[16] !== 1'bx ) && ( RS2_VALUE_prev[16] !== RS2_VALUE_expected_prev[16] )
		&& ((RS2_VALUE_expected_prev[16] !== last_RS2_VALUE_exp[16]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS2_VALUE[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS2_VALUE_expected_prev);
		$display ("     Real value = %b", RS2_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RS2_VALUE_exp[16] = RS2_VALUE_expected_prev[16];
	end
	if (
		( RS2_VALUE_expected_prev[17] !== 1'bx ) && ( RS2_VALUE_prev[17] !== RS2_VALUE_expected_prev[17] )
		&& ((RS2_VALUE_expected_prev[17] !== last_RS2_VALUE_exp[17]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS2_VALUE[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS2_VALUE_expected_prev);
		$display ("     Real value = %b", RS2_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RS2_VALUE_exp[17] = RS2_VALUE_expected_prev[17];
	end
	if (
		( RS2_VALUE_expected_prev[18] !== 1'bx ) && ( RS2_VALUE_prev[18] !== RS2_VALUE_expected_prev[18] )
		&& ((RS2_VALUE_expected_prev[18] !== last_RS2_VALUE_exp[18]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS2_VALUE[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS2_VALUE_expected_prev);
		$display ("     Real value = %b", RS2_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RS2_VALUE_exp[18] = RS2_VALUE_expected_prev[18];
	end
	if (
		( RS2_VALUE_expected_prev[19] !== 1'bx ) && ( RS2_VALUE_prev[19] !== RS2_VALUE_expected_prev[19] )
		&& ((RS2_VALUE_expected_prev[19] !== last_RS2_VALUE_exp[19]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS2_VALUE[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS2_VALUE_expected_prev);
		$display ("     Real value = %b", RS2_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RS2_VALUE_exp[19] = RS2_VALUE_expected_prev[19];
	end
	if (
		( RS2_VALUE_expected_prev[20] !== 1'bx ) && ( RS2_VALUE_prev[20] !== RS2_VALUE_expected_prev[20] )
		&& ((RS2_VALUE_expected_prev[20] !== last_RS2_VALUE_exp[20]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS2_VALUE[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS2_VALUE_expected_prev);
		$display ("     Real value = %b", RS2_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RS2_VALUE_exp[20] = RS2_VALUE_expected_prev[20];
	end
	if (
		( RS2_VALUE_expected_prev[21] !== 1'bx ) && ( RS2_VALUE_prev[21] !== RS2_VALUE_expected_prev[21] )
		&& ((RS2_VALUE_expected_prev[21] !== last_RS2_VALUE_exp[21]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS2_VALUE[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS2_VALUE_expected_prev);
		$display ("     Real value = %b", RS2_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RS2_VALUE_exp[21] = RS2_VALUE_expected_prev[21];
	end
	if (
		( RS2_VALUE_expected_prev[22] !== 1'bx ) && ( RS2_VALUE_prev[22] !== RS2_VALUE_expected_prev[22] )
		&& ((RS2_VALUE_expected_prev[22] !== last_RS2_VALUE_exp[22]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS2_VALUE[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS2_VALUE_expected_prev);
		$display ("     Real value = %b", RS2_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RS2_VALUE_exp[22] = RS2_VALUE_expected_prev[22];
	end
	if (
		( RS2_VALUE_expected_prev[23] !== 1'bx ) && ( RS2_VALUE_prev[23] !== RS2_VALUE_expected_prev[23] )
		&& ((RS2_VALUE_expected_prev[23] !== last_RS2_VALUE_exp[23]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS2_VALUE[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS2_VALUE_expected_prev);
		$display ("     Real value = %b", RS2_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RS2_VALUE_exp[23] = RS2_VALUE_expected_prev[23];
	end
	if (
		( RS2_VALUE_expected_prev[24] !== 1'bx ) && ( RS2_VALUE_prev[24] !== RS2_VALUE_expected_prev[24] )
		&& ((RS2_VALUE_expected_prev[24] !== last_RS2_VALUE_exp[24]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS2_VALUE[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS2_VALUE_expected_prev);
		$display ("     Real value = %b", RS2_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RS2_VALUE_exp[24] = RS2_VALUE_expected_prev[24];
	end
	if (
		( RS2_VALUE_expected_prev[25] !== 1'bx ) && ( RS2_VALUE_prev[25] !== RS2_VALUE_expected_prev[25] )
		&& ((RS2_VALUE_expected_prev[25] !== last_RS2_VALUE_exp[25]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS2_VALUE[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS2_VALUE_expected_prev);
		$display ("     Real value = %b", RS2_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RS2_VALUE_exp[25] = RS2_VALUE_expected_prev[25];
	end
	if (
		( RS2_VALUE_expected_prev[26] !== 1'bx ) && ( RS2_VALUE_prev[26] !== RS2_VALUE_expected_prev[26] )
		&& ((RS2_VALUE_expected_prev[26] !== last_RS2_VALUE_exp[26]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS2_VALUE[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS2_VALUE_expected_prev);
		$display ("     Real value = %b", RS2_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RS2_VALUE_exp[26] = RS2_VALUE_expected_prev[26];
	end
	if (
		( RS2_VALUE_expected_prev[27] !== 1'bx ) && ( RS2_VALUE_prev[27] !== RS2_VALUE_expected_prev[27] )
		&& ((RS2_VALUE_expected_prev[27] !== last_RS2_VALUE_exp[27]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS2_VALUE[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS2_VALUE_expected_prev);
		$display ("     Real value = %b", RS2_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RS2_VALUE_exp[27] = RS2_VALUE_expected_prev[27];
	end
	if (
		( RS2_VALUE_expected_prev[28] !== 1'bx ) && ( RS2_VALUE_prev[28] !== RS2_VALUE_expected_prev[28] )
		&& ((RS2_VALUE_expected_prev[28] !== last_RS2_VALUE_exp[28]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS2_VALUE[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS2_VALUE_expected_prev);
		$display ("     Real value = %b", RS2_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RS2_VALUE_exp[28] = RS2_VALUE_expected_prev[28];
	end
	if (
		( RS2_VALUE_expected_prev[29] !== 1'bx ) && ( RS2_VALUE_prev[29] !== RS2_VALUE_expected_prev[29] )
		&& ((RS2_VALUE_expected_prev[29] !== last_RS2_VALUE_exp[29]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS2_VALUE[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS2_VALUE_expected_prev);
		$display ("     Real value = %b", RS2_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RS2_VALUE_exp[29] = RS2_VALUE_expected_prev[29];
	end
	if (
		( RS2_VALUE_expected_prev[30] !== 1'bx ) && ( RS2_VALUE_prev[30] !== RS2_VALUE_expected_prev[30] )
		&& ((RS2_VALUE_expected_prev[30] !== last_RS2_VALUE_exp[30]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS2_VALUE[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS2_VALUE_expected_prev);
		$display ("     Real value = %b", RS2_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RS2_VALUE_exp[30] = RS2_VALUE_expected_prev[30];
	end
	if (
		( RS2_VALUE_expected_prev[31] !== 1'bx ) && ( RS2_VALUE_prev[31] !== RS2_VALUE_expected_prev[31] )
		&& ((RS2_VALUE_expected_prev[31] !== last_RS2_VALUE_exp[31]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS2_VALUE[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS2_VALUE_expected_prev);
		$display ("     Real value = %b", RS2_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RS2_VALUE_exp[31] = RS2_VALUE_expected_prev[31];
	end
	if (
		( SIG_EXT12_32_expected_prev[0] !== 1'bx ) && ( SIG_EXT12_32_prev[0] !== SIG_EXT12_32_expected_prev[0] )
		&& ((SIG_EXT12_32_expected_prev[0] !== last_SIG_EXT12_32_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIG_EXT12_32[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIG_EXT12_32_expected_prev);
		$display ("     Real value = %b", SIG_EXT12_32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SIG_EXT12_32_exp[0] = SIG_EXT12_32_expected_prev[0];
	end
	if (
		( SIG_EXT12_32_expected_prev[1] !== 1'bx ) && ( SIG_EXT12_32_prev[1] !== SIG_EXT12_32_expected_prev[1] )
		&& ((SIG_EXT12_32_expected_prev[1] !== last_SIG_EXT12_32_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIG_EXT12_32[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIG_EXT12_32_expected_prev);
		$display ("     Real value = %b", SIG_EXT12_32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SIG_EXT12_32_exp[1] = SIG_EXT12_32_expected_prev[1];
	end
	if (
		( SIG_EXT12_32_expected_prev[2] !== 1'bx ) && ( SIG_EXT12_32_prev[2] !== SIG_EXT12_32_expected_prev[2] )
		&& ((SIG_EXT12_32_expected_prev[2] !== last_SIG_EXT12_32_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIG_EXT12_32[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIG_EXT12_32_expected_prev);
		$display ("     Real value = %b", SIG_EXT12_32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SIG_EXT12_32_exp[2] = SIG_EXT12_32_expected_prev[2];
	end
	if (
		( SIG_EXT12_32_expected_prev[3] !== 1'bx ) && ( SIG_EXT12_32_prev[3] !== SIG_EXT12_32_expected_prev[3] )
		&& ((SIG_EXT12_32_expected_prev[3] !== last_SIG_EXT12_32_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIG_EXT12_32[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIG_EXT12_32_expected_prev);
		$display ("     Real value = %b", SIG_EXT12_32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SIG_EXT12_32_exp[3] = SIG_EXT12_32_expected_prev[3];
	end
	if (
		( SIG_EXT12_32_expected_prev[4] !== 1'bx ) && ( SIG_EXT12_32_prev[4] !== SIG_EXT12_32_expected_prev[4] )
		&& ((SIG_EXT12_32_expected_prev[4] !== last_SIG_EXT12_32_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIG_EXT12_32[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIG_EXT12_32_expected_prev);
		$display ("     Real value = %b", SIG_EXT12_32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SIG_EXT12_32_exp[4] = SIG_EXT12_32_expected_prev[4];
	end
	if (
		( SIG_EXT12_32_expected_prev[5] !== 1'bx ) && ( SIG_EXT12_32_prev[5] !== SIG_EXT12_32_expected_prev[5] )
		&& ((SIG_EXT12_32_expected_prev[5] !== last_SIG_EXT12_32_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIG_EXT12_32[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIG_EXT12_32_expected_prev);
		$display ("     Real value = %b", SIG_EXT12_32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SIG_EXT12_32_exp[5] = SIG_EXT12_32_expected_prev[5];
	end
	if (
		( SIG_EXT12_32_expected_prev[6] !== 1'bx ) && ( SIG_EXT12_32_prev[6] !== SIG_EXT12_32_expected_prev[6] )
		&& ((SIG_EXT12_32_expected_prev[6] !== last_SIG_EXT12_32_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIG_EXT12_32[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIG_EXT12_32_expected_prev);
		$display ("     Real value = %b", SIG_EXT12_32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SIG_EXT12_32_exp[6] = SIG_EXT12_32_expected_prev[6];
	end
	if (
		( SIG_EXT12_32_expected_prev[7] !== 1'bx ) && ( SIG_EXT12_32_prev[7] !== SIG_EXT12_32_expected_prev[7] )
		&& ((SIG_EXT12_32_expected_prev[7] !== last_SIG_EXT12_32_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIG_EXT12_32[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIG_EXT12_32_expected_prev);
		$display ("     Real value = %b", SIG_EXT12_32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SIG_EXT12_32_exp[7] = SIG_EXT12_32_expected_prev[7];
	end
	if (
		( SIG_EXT12_32_expected_prev[8] !== 1'bx ) && ( SIG_EXT12_32_prev[8] !== SIG_EXT12_32_expected_prev[8] )
		&& ((SIG_EXT12_32_expected_prev[8] !== last_SIG_EXT12_32_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIG_EXT12_32[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIG_EXT12_32_expected_prev);
		$display ("     Real value = %b", SIG_EXT12_32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SIG_EXT12_32_exp[8] = SIG_EXT12_32_expected_prev[8];
	end
	if (
		( SIG_EXT12_32_expected_prev[9] !== 1'bx ) && ( SIG_EXT12_32_prev[9] !== SIG_EXT12_32_expected_prev[9] )
		&& ((SIG_EXT12_32_expected_prev[9] !== last_SIG_EXT12_32_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIG_EXT12_32[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIG_EXT12_32_expected_prev);
		$display ("     Real value = %b", SIG_EXT12_32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SIG_EXT12_32_exp[9] = SIG_EXT12_32_expected_prev[9];
	end
	if (
		( SIG_EXT12_32_expected_prev[10] !== 1'bx ) && ( SIG_EXT12_32_prev[10] !== SIG_EXT12_32_expected_prev[10] )
		&& ((SIG_EXT12_32_expected_prev[10] !== last_SIG_EXT12_32_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIG_EXT12_32[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIG_EXT12_32_expected_prev);
		$display ("     Real value = %b", SIG_EXT12_32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SIG_EXT12_32_exp[10] = SIG_EXT12_32_expected_prev[10];
	end
	if (
		( SIG_EXT12_32_expected_prev[11] !== 1'bx ) && ( SIG_EXT12_32_prev[11] !== SIG_EXT12_32_expected_prev[11] )
		&& ((SIG_EXT12_32_expected_prev[11] !== last_SIG_EXT12_32_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIG_EXT12_32[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIG_EXT12_32_expected_prev);
		$display ("     Real value = %b", SIG_EXT12_32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SIG_EXT12_32_exp[11] = SIG_EXT12_32_expected_prev[11];
	end
	if (
		( SIG_EXT12_32_expected_prev[12] !== 1'bx ) && ( SIG_EXT12_32_prev[12] !== SIG_EXT12_32_expected_prev[12] )
		&& ((SIG_EXT12_32_expected_prev[12] !== last_SIG_EXT12_32_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIG_EXT12_32[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIG_EXT12_32_expected_prev);
		$display ("     Real value = %b", SIG_EXT12_32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SIG_EXT12_32_exp[12] = SIG_EXT12_32_expected_prev[12];
	end
	if (
		( SIG_EXT12_32_expected_prev[13] !== 1'bx ) && ( SIG_EXT12_32_prev[13] !== SIG_EXT12_32_expected_prev[13] )
		&& ((SIG_EXT12_32_expected_prev[13] !== last_SIG_EXT12_32_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIG_EXT12_32[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIG_EXT12_32_expected_prev);
		$display ("     Real value = %b", SIG_EXT12_32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SIG_EXT12_32_exp[13] = SIG_EXT12_32_expected_prev[13];
	end
	if (
		( SIG_EXT12_32_expected_prev[14] !== 1'bx ) && ( SIG_EXT12_32_prev[14] !== SIG_EXT12_32_expected_prev[14] )
		&& ((SIG_EXT12_32_expected_prev[14] !== last_SIG_EXT12_32_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIG_EXT12_32[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIG_EXT12_32_expected_prev);
		$display ("     Real value = %b", SIG_EXT12_32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SIG_EXT12_32_exp[14] = SIG_EXT12_32_expected_prev[14];
	end
	if (
		( SIG_EXT12_32_expected_prev[15] !== 1'bx ) && ( SIG_EXT12_32_prev[15] !== SIG_EXT12_32_expected_prev[15] )
		&& ((SIG_EXT12_32_expected_prev[15] !== last_SIG_EXT12_32_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIG_EXT12_32[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIG_EXT12_32_expected_prev);
		$display ("     Real value = %b", SIG_EXT12_32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SIG_EXT12_32_exp[15] = SIG_EXT12_32_expected_prev[15];
	end
	if (
		( SIG_EXT12_32_expected_prev[16] !== 1'bx ) && ( SIG_EXT12_32_prev[16] !== SIG_EXT12_32_expected_prev[16] )
		&& ((SIG_EXT12_32_expected_prev[16] !== last_SIG_EXT12_32_exp[16]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIG_EXT12_32[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIG_EXT12_32_expected_prev);
		$display ("     Real value = %b", SIG_EXT12_32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SIG_EXT12_32_exp[16] = SIG_EXT12_32_expected_prev[16];
	end
	if (
		( SIG_EXT12_32_expected_prev[17] !== 1'bx ) && ( SIG_EXT12_32_prev[17] !== SIG_EXT12_32_expected_prev[17] )
		&& ((SIG_EXT12_32_expected_prev[17] !== last_SIG_EXT12_32_exp[17]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIG_EXT12_32[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIG_EXT12_32_expected_prev);
		$display ("     Real value = %b", SIG_EXT12_32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SIG_EXT12_32_exp[17] = SIG_EXT12_32_expected_prev[17];
	end
	if (
		( SIG_EXT12_32_expected_prev[18] !== 1'bx ) && ( SIG_EXT12_32_prev[18] !== SIG_EXT12_32_expected_prev[18] )
		&& ((SIG_EXT12_32_expected_prev[18] !== last_SIG_EXT12_32_exp[18]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIG_EXT12_32[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIG_EXT12_32_expected_prev);
		$display ("     Real value = %b", SIG_EXT12_32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SIG_EXT12_32_exp[18] = SIG_EXT12_32_expected_prev[18];
	end
	if (
		( SIG_EXT12_32_expected_prev[19] !== 1'bx ) && ( SIG_EXT12_32_prev[19] !== SIG_EXT12_32_expected_prev[19] )
		&& ((SIG_EXT12_32_expected_prev[19] !== last_SIG_EXT12_32_exp[19]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIG_EXT12_32[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIG_EXT12_32_expected_prev);
		$display ("     Real value = %b", SIG_EXT12_32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SIG_EXT12_32_exp[19] = SIG_EXT12_32_expected_prev[19];
	end
	if (
		( SIG_EXT12_32_expected_prev[20] !== 1'bx ) && ( SIG_EXT12_32_prev[20] !== SIG_EXT12_32_expected_prev[20] )
		&& ((SIG_EXT12_32_expected_prev[20] !== last_SIG_EXT12_32_exp[20]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIG_EXT12_32[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIG_EXT12_32_expected_prev);
		$display ("     Real value = %b", SIG_EXT12_32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SIG_EXT12_32_exp[20] = SIG_EXT12_32_expected_prev[20];
	end
	if (
		( SIG_EXT12_32_expected_prev[21] !== 1'bx ) && ( SIG_EXT12_32_prev[21] !== SIG_EXT12_32_expected_prev[21] )
		&& ((SIG_EXT12_32_expected_prev[21] !== last_SIG_EXT12_32_exp[21]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIG_EXT12_32[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIG_EXT12_32_expected_prev);
		$display ("     Real value = %b", SIG_EXT12_32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SIG_EXT12_32_exp[21] = SIG_EXT12_32_expected_prev[21];
	end
	if (
		( SIG_EXT12_32_expected_prev[22] !== 1'bx ) && ( SIG_EXT12_32_prev[22] !== SIG_EXT12_32_expected_prev[22] )
		&& ((SIG_EXT12_32_expected_prev[22] !== last_SIG_EXT12_32_exp[22]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIG_EXT12_32[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIG_EXT12_32_expected_prev);
		$display ("     Real value = %b", SIG_EXT12_32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SIG_EXT12_32_exp[22] = SIG_EXT12_32_expected_prev[22];
	end
	if (
		( SIG_EXT12_32_expected_prev[23] !== 1'bx ) && ( SIG_EXT12_32_prev[23] !== SIG_EXT12_32_expected_prev[23] )
		&& ((SIG_EXT12_32_expected_prev[23] !== last_SIG_EXT12_32_exp[23]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIG_EXT12_32[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIG_EXT12_32_expected_prev);
		$display ("     Real value = %b", SIG_EXT12_32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SIG_EXT12_32_exp[23] = SIG_EXT12_32_expected_prev[23];
	end
	if (
		( SIG_EXT12_32_expected_prev[24] !== 1'bx ) && ( SIG_EXT12_32_prev[24] !== SIG_EXT12_32_expected_prev[24] )
		&& ((SIG_EXT12_32_expected_prev[24] !== last_SIG_EXT12_32_exp[24]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIG_EXT12_32[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIG_EXT12_32_expected_prev);
		$display ("     Real value = %b", SIG_EXT12_32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SIG_EXT12_32_exp[24] = SIG_EXT12_32_expected_prev[24];
	end
	if (
		( SIG_EXT12_32_expected_prev[25] !== 1'bx ) && ( SIG_EXT12_32_prev[25] !== SIG_EXT12_32_expected_prev[25] )
		&& ((SIG_EXT12_32_expected_prev[25] !== last_SIG_EXT12_32_exp[25]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIG_EXT12_32[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIG_EXT12_32_expected_prev);
		$display ("     Real value = %b", SIG_EXT12_32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SIG_EXT12_32_exp[25] = SIG_EXT12_32_expected_prev[25];
	end
	if (
		( SIG_EXT12_32_expected_prev[26] !== 1'bx ) && ( SIG_EXT12_32_prev[26] !== SIG_EXT12_32_expected_prev[26] )
		&& ((SIG_EXT12_32_expected_prev[26] !== last_SIG_EXT12_32_exp[26]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIG_EXT12_32[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIG_EXT12_32_expected_prev);
		$display ("     Real value = %b", SIG_EXT12_32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SIG_EXT12_32_exp[26] = SIG_EXT12_32_expected_prev[26];
	end
	if (
		( SIG_EXT12_32_expected_prev[27] !== 1'bx ) && ( SIG_EXT12_32_prev[27] !== SIG_EXT12_32_expected_prev[27] )
		&& ((SIG_EXT12_32_expected_prev[27] !== last_SIG_EXT12_32_exp[27]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIG_EXT12_32[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIG_EXT12_32_expected_prev);
		$display ("     Real value = %b", SIG_EXT12_32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SIG_EXT12_32_exp[27] = SIG_EXT12_32_expected_prev[27];
	end
	if (
		( SIG_EXT12_32_expected_prev[28] !== 1'bx ) && ( SIG_EXT12_32_prev[28] !== SIG_EXT12_32_expected_prev[28] )
		&& ((SIG_EXT12_32_expected_prev[28] !== last_SIG_EXT12_32_exp[28]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIG_EXT12_32[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIG_EXT12_32_expected_prev);
		$display ("     Real value = %b", SIG_EXT12_32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SIG_EXT12_32_exp[28] = SIG_EXT12_32_expected_prev[28];
	end
	if (
		( SIG_EXT12_32_expected_prev[29] !== 1'bx ) && ( SIG_EXT12_32_prev[29] !== SIG_EXT12_32_expected_prev[29] )
		&& ((SIG_EXT12_32_expected_prev[29] !== last_SIG_EXT12_32_exp[29]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIG_EXT12_32[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIG_EXT12_32_expected_prev);
		$display ("     Real value = %b", SIG_EXT12_32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SIG_EXT12_32_exp[29] = SIG_EXT12_32_expected_prev[29];
	end
	if (
		( SIG_EXT12_32_expected_prev[30] !== 1'bx ) && ( SIG_EXT12_32_prev[30] !== SIG_EXT12_32_expected_prev[30] )
		&& ((SIG_EXT12_32_expected_prev[30] !== last_SIG_EXT12_32_exp[30]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIG_EXT12_32[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIG_EXT12_32_expected_prev);
		$display ("     Real value = %b", SIG_EXT12_32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SIG_EXT12_32_exp[30] = SIG_EXT12_32_expected_prev[30];
	end
	if (
		( SIG_EXT12_32_expected_prev[31] !== 1'bx ) && ( SIG_EXT12_32_prev[31] !== SIG_EXT12_32_expected_prev[31] )
		&& ((SIG_EXT12_32_expected_prev[31] !== last_SIG_EXT12_32_exp[31]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIG_EXT12_32[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIG_EXT12_32_expected_prev);
		$display ("     Real value = %b", SIG_EXT12_32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SIG_EXT12_32_exp[31] = SIG_EXT12_32_expected_prev[31];
	end
	if (
		( UAL_FONTE_expected_prev !== 1'bx ) && ( UAL_FONTE_prev !== UAL_FONTE_expected_prev )
		&& ((UAL_FONTE_expected_prev !== last_UAL_FONTE_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UAL_FONTE :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UAL_FONTE_expected_prev);
		$display ("     Real value = %b", UAL_FONTE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_UAL_FONTE_exp = UAL_FONTE_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module risc_v32i_vlg_vec_tst();
// constants                                           
// general purpose registers
reg i_CLK;
reg i_RST;
// wires                                               
wire [31:0] ALU_OUT;
wire [31:0] INSTRUCTION1;
wire [31:0] PC;
wire REG_WR;
wire [31:0] RS1_VALUE;
wire [31:0] RS2_VALUE;
wire [31:0] SIG_EXT12_32;
wire UAL_FONTE;

wire sampler;                             

// assign statements (if any)                          
risc_v32i i1 (
// port map - connection between master ports and signals/registers   
	.ALU_OUT(ALU_OUT),
	.i_CLK(i_CLK),
	.i_RST(i_RST),
	.INSTRUCTION1(INSTRUCTION1),
	.PC(PC),
	.REG_WR(REG_WR),
	.RS1_VALUE(RS1_VALUE),
	.RS2_VALUE(RS2_VALUE),
	.SIG_EXT12_32(SIG_EXT12_32),
	.UAL_FONTE(UAL_FONTE)
);

// i_CLK
initial
begin
	i_CLK = 1'b1;
	i_CLK = #25000 1'b0;
	# 25000;
	repeat(18)
	begin
		i_CLK = 1'b1;
		i_CLK = #25000 1'b0;
		# 25000;
	end
	i_CLK = 1'b1;
	i_CLK = #25000 1'b0;
end 

// i_RST
initial
begin
	i_RST = 1'b1;
end 

risc_v32i_vlg_sample_tst tb_sample (
	.i_CLK(i_CLK),
	.i_RST(i_RST),
	.sampler_tx(sampler)
);

risc_v32i_vlg_check_tst tb_out(
	.ALU_OUT(ALU_OUT),
	.INSTRUCTION1(INSTRUCTION1),
	.PC(PC),
	.REG_WR(REG_WR),
	.RS1_VALUE(RS1_VALUE),
	.RS2_VALUE(RS2_VALUE),
	.SIG_EXT12_32(SIG_EXT12_32),
	.UAL_FONTE(UAL_FONTE),
	.sampler_rx(sampler)
);
endmodule

